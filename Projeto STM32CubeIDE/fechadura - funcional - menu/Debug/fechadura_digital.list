
fechadura_digital.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef8  08002ef8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ef8  08002ef8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ef8  08002ef8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000070  08002f70  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002f70  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b09  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000181b  00000000  00000000  00026ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000728  00000000  00000000  000283c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000640  00000000  00000000  00028ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000168b0  00000000  00000000  00029128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007022  00000000  00000000  0003f9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080313  00000000  00000000  000469fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6d0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001db0  00000000  00000000  000c6d88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b10 	.word	0x08002b10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002b10 	.word	0x08002b10

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <setColumn>:

int numeroOpcao = 0;
int linhaAnterior = 0;

void setColumn (int column)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	GPIOA->ODR = 0x40<<column;
 8000164:	2240      	movs	r2, #64	; 0x40
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	409a      	lsls	r2, r3
 800016a:	4b03      	ldr	r3, [pc, #12]	; (8000178 <setColumn+0x1c>)
 800016c:	60da      	str	r2, [r3, #12]
}
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	40010800 	.word	0x40010800

0800017c <readRow>:

int readRow (int row)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
	row+=4;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	3304      	adds	r3, #4
 8000188:	607b      	str	r3, [r7, #4]
	row=0x40<<row;
 800018a:	2240      	movs	r2, #64	; 0x40
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	fa02 f303 	lsl.w	r3, r2, r3
 8000192:	607b      	str	r3, [r7, #4]

	return (int) HAL_GPIO_ReadPin(GPIOA, row);
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	b29b      	uxth	r3, r3
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <readRow+0x30>)
 800019c:	f001 fa48 	bl	8001630 <HAL_GPIO_ReadPin>
 80001a0:	4603      	mov	r3, r0
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40010800 	.word	0x40010800

080001b0 <keypadLoopO>:
		lcd_escreve_string(element[row][column]);
	}
}

int keypadLoopO ()
{
 80001b0:	b5b0      	push	{r4, r5, r7, lr}
 80001b2:	b08e      	sub	sp, #56	; 0x38
 80001b4:	af00      	add	r7, sp, #0
	int key;
	int mat[3][3] = {7,8,9,4,5,6,1,2,3};
 80001b6:	4b26      	ldr	r3, [pc, #152]	; (8000250 <keypadLoopO+0xa0>)
 80001b8:	1d3c      	adds	r4, r7, #4
 80001ba:	461d      	mov	r5, r3
 80001bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	682b      	ldr	r3, [r5, #0]
 80001c6:	6023      	str	r3, [r4, #0]
	int pressed = 0 ;
 80001c8:	2300      	movs	r3, #0
 80001ca:	633b      	str	r3, [r7, #48]	; 0x30
	while (pressed != 1)
 80001cc:	e034      	b.n	8000238 <keypadLoopO+0x88>
	{
		for (int j = 0 ; j < 4 ; j++)
 80001ce:	2300      	movs	r3, #0
 80001d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80001d2:	e02e      	b.n	8000232 <keypadLoopO+0x82>
		{
			setColumn(j);
 80001d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80001d6:	f7ff ffc1 	bl	800015c <setColumn>
			for (int i = 0; i < 4 ; i++)
 80001da:	2300      	movs	r3, #0
 80001dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80001de:	e01e      	b.n	800021e <keypadLoopO+0x6e>
			{
				if (readRow(i) == 1)
 80001e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80001e2:	f7ff ffcb 	bl	800017c <readRow>
 80001e6:	4603      	mov	r3, r0
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d115      	bne.n	8000218 <keypadLoopO+0x68>
				{
					if (i==2 || i==1)
 80001ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d002      	beq.n	80001f8 <keypadLoopO+0x48>
 80001f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d10f      	bne.n	8000218 <keypadLoopO+0x68>
					{
						key = mat[i][j];
 80001f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80001fa:	4613      	mov	r3, r2
 80001fc:	005b      	lsls	r3, r3, #1
 80001fe:	4413      	add	r3, r2
 8000200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000202:	4413      	add	r3, r2
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800020a:	4413      	add	r3, r2
 800020c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8000210:	637b      	str	r3, [r7, #52]	; 0x34
						pressed = 1;
 8000212:	2301      	movs	r3, #1
 8000214:	633b      	str	r3, [r7, #48]	; 0x30
						break;
 8000216:	e005      	b.n	8000224 <keypadLoopO+0x74>
			for (int i = 0; i < 4 ; i++)
 8000218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800021a:	3301      	adds	r3, #1
 800021c:	62bb      	str	r3, [r7, #40]	; 0x28
 800021e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000220:	2b03      	cmp	r3, #3
 8000222:	dddd      	ble.n	80001e0 <keypadLoopO+0x30>
					}
				}
		    }
			if (pressed == 1)  break;
 8000224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000226:	2b01      	cmp	r3, #1
 8000228:	d100      	bne.n	800022c <keypadLoopO+0x7c>
 800022a:	e005      	b.n	8000238 <keypadLoopO+0x88>
		for (int j = 0 ; j < 4 ; j++)
 800022c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800022e:	3301      	adds	r3, #1
 8000230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000234:	2b03      	cmp	r3, #3
 8000236:	ddcd      	ble.n	80001d4 <keypadLoopO+0x24>
	while (pressed != 1)
 8000238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800023a:	2b01      	cmp	r3, #1
 800023c:	d1c7      	bne.n	80001ce <keypadLoopO+0x1e>
		}
	  }
	  HAL_Delay(150);
 800023e:	2096      	movs	r0, #150	; 0x96
 8000240:	f000 ff9e 	bl	8001180 <HAL_Delay>
	  return key;
 8000244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000246:	4618      	mov	r0, r3
 8000248:	3738      	adds	r7, #56	; 0x38
 800024a:	46bd      	mov	sp, r7
 800024c:	bdb0      	pop	{r4, r5, r7, pc}
 800024e:	bf00      	nop
 8000250:	08002b48 	.word	0x08002b48

08000254 <keypadLoopF>:


int keypadLoopF ()
{
 8000254:	b5b0      	push	{r4, r5, r7, lr}
 8000256:	b092      	sub	sp, #72	; 0x48
 8000258:	af00      	add	r7, sp, #0
  int key[4]; // Assumirei como 4 d√≠gitos
  int dig = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  int mat[3][3] = {7,8,9,4,5,6,1,2,3};
 800025e:	4b72      	ldr	r3, [pc, #456]	; (8000428 <keypadLoopF+0x1d4>)
 8000260:	1d3c      	adds	r4, r7, #4
 8000262:	461d      	mov	r5, r3
 8000264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026c:	682b      	ldr	r3, [r5, #0]
 800026e:	6023      	str	r3, [r4, #0]
  do
  {
      for (int j = 0 ; j < 4 ; j++)
 8000270:	2300      	movs	r3, #0
 8000272:	643b      	str	r3, [r7, #64]	; 0x40
 8000274:	e0ac      	b.n	80003d0 <keypadLoopF+0x17c>
      {
    	  setColumn(j);
 8000276:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000278:	f7ff ff70 	bl	800015c <setColumn>
    	  for (int i = 0; i < 4 ; i++)
 800027c:	2300      	movs	r3, #0
 800027e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000280:	e09f      	b.n	80003c2 <keypadLoopF+0x16e>
    	  {
			  if (readRow(i) == 1)
 8000282:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000284:	f7ff ff7a 	bl	800017c <readRow>
 8000288:	4603      	mov	r3, r0
 800028a:	2b01      	cmp	r3, #1
 800028c:	f040 8096 	bne.w	80003bc <keypadLoopF+0x168>
			  {
				  if (dig == 0)
 8000290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000292:	2b00      	cmp	r3, #0
 8000294:	d121      	bne.n	80002da <keypadLoopF+0x86>
				  {
					  key[0] = mat[i][j];
 8000296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000298:	4613      	mov	r3, r2
 800029a:	005b      	lsls	r3, r3, #1
 800029c:	4413      	add	r3, r2
 800029e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80002a0:	4413      	add	r3, r2
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80002a8:	4413      	add	r3, r2
 80002aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
					  lcd_posicao_do_cursor(2, 2);
 80002b0:	2102      	movs	r1, #2
 80002b2:	2002      	movs	r0, #2
 80002b4:	f000 f9ac 	bl	8000610 <lcd_posicao_do_cursor>
					  lcd_escreve_string("1 numbers read\r");
 80002b8:	485c      	ldr	r0, [pc, #368]	; (800042c <keypadLoopF+0x1d8>)
 80002ba:	f000 fa7e 	bl	80007ba <lcd_escreve_string>
					  HAL_Delay(500);
 80002be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c2:	f000 ff5d 	bl	8001180 <HAL_Delay>
					  lcd_limpa_linha(1);
 80002c6:	2001      	movs	r0, #1
 80002c8:	f000 fa40 	bl	800074c <lcd_limpa_linha>
					  lcd_limpa_linha(2);
 80002cc:	2002      	movs	r0, #2
 80002ce:	f000 fa3d 	bl	800074c <lcd_limpa_linha>
					  lcd_limpa_linha(3);
 80002d2:	2003      	movs	r0, #3
 80002d4:	f000 fa3a 	bl	800074c <lcd_limpa_linha>
 80002d8:	e06d      	b.n	80003b6 <keypadLoopF+0x162>
				  }
				  else if (dig == 1)
 80002da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d121      	bne.n	8000324 <keypadLoopF+0xd0>
				  {
					  key[1] = mat[i][j];
 80002e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80002e2:	4613      	mov	r3, r2
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	4413      	add	r3, r2
 80002e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80002ea:	4413      	add	r3, r2
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80002f2:	4413      	add	r3, r2
 80002f4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80002f8:	62fb      	str	r3, [r7, #44]	; 0x2c
					  lcd_posicao_do_cursor(2, 2);
 80002fa:	2102      	movs	r1, #2
 80002fc:	2002      	movs	r0, #2
 80002fe:	f000 f987 	bl	8000610 <lcd_posicao_do_cursor>
					  lcd_escreve_string("2 numbers read\r");
 8000302:	484b      	ldr	r0, [pc, #300]	; (8000430 <keypadLoopF+0x1dc>)
 8000304:	f000 fa59 	bl	80007ba <lcd_escreve_string>
					  HAL_Delay(1000);
 8000308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030c:	f000 ff38 	bl	8001180 <HAL_Delay>
					  lcd_limpa_linha(1);
 8000310:	2001      	movs	r0, #1
 8000312:	f000 fa1b 	bl	800074c <lcd_limpa_linha>
					  lcd_limpa_linha(2);
 8000316:	2002      	movs	r0, #2
 8000318:	f000 fa18 	bl	800074c <lcd_limpa_linha>
					  lcd_limpa_linha(3);
 800031c:	2003      	movs	r0, #3
 800031e:	f000 fa15 	bl	800074c <lcd_limpa_linha>
 8000322:	e048      	b.n	80003b6 <keypadLoopF+0x162>
				  }
				  else if (dig == 2)
 8000324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000326:	2b02      	cmp	r3, #2
 8000328:	d121      	bne.n	800036e <keypadLoopF+0x11a>
				  {
					  key[2] = mat[i][j];
 800032a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800032c:	4613      	mov	r3, r2
 800032e:	005b      	lsls	r3, r3, #1
 8000330:	4413      	add	r3, r2
 8000332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000334:	4413      	add	r3, r2
 8000336:	009b      	lsls	r3, r3, #2
 8000338:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800033c:	4413      	add	r3, r2
 800033e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8000342:	633b      	str	r3, [r7, #48]	; 0x30
					  lcd_posicao_do_cursor(2, 2);
 8000344:	2102      	movs	r1, #2
 8000346:	2002      	movs	r0, #2
 8000348:	f000 f962 	bl	8000610 <lcd_posicao_do_cursor>
					  lcd_escreve_string("3 numbers read\r");
 800034c:	4839      	ldr	r0, [pc, #228]	; (8000434 <keypadLoopF+0x1e0>)
 800034e:	f000 fa34 	bl	80007ba <lcd_escreve_string>
					  HAL_Delay(1000);
 8000352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000356:	f000 ff13 	bl	8001180 <HAL_Delay>
					  lcd_limpa_linha(1);
 800035a:	2001      	movs	r0, #1
 800035c:	f000 f9f6 	bl	800074c <lcd_limpa_linha>
					  lcd_limpa_linha(2);
 8000360:	2002      	movs	r0, #2
 8000362:	f000 f9f3 	bl	800074c <lcd_limpa_linha>
					  lcd_limpa_linha(3);
 8000366:	2003      	movs	r0, #3
 8000368:	f000 f9f0 	bl	800074c <lcd_limpa_linha>
 800036c:	e023      	b.n	80003b6 <keypadLoopF+0x162>
				  }
				  else if (dig == 3)
 800036e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000370:	2b03      	cmp	r3, #3
 8000372:	d120      	bne.n	80003b6 <keypadLoopF+0x162>
				  {
					  key[3] = mat[i][j];
 8000374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000376:	4613      	mov	r3, r2
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	4413      	add	r3, r2
 800037c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800037e:	4413      	add	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000386:	4413      	add	r3, r2
 8000388:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800038c:	637b      	str	r3, [r7, #52]	; 0x34
					  lcd_posicao_do_cursor(2, 2);
 800038e:	2102      	movs	r1, #2
 8000390:	2002      	movs	r0, #2
 8000392:	f000 f93d 	bl	8000610 <lcd_posicao_do_cursor>
					  lcd_escreve_string("4 numbers read\r");
 8000396:	4828      	ldr	r0, [pc, #160]	; (8000438 <keypadLoopF+0x1e4>)
 8000398:	f000 fa0f 	bl	80007ba <lcd_escreve_string>
					  HAL_Delay(1000);
 800039c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003a0:	f000 feee 	bl	8001180 <HAL_Delay>
					  lcd_limpa_linha(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f000 f9d1 	bl	800074c <lcd_limpa_linha>
					  lcd_limpa_linha(2);
 80003aa:	2002      	movs	r0, #2
 80003ac:	f000 f9ce 	bl	800074c <lcd_limpa_linha>
					  lcd_limpa_linha(3);
 80003b0:	2003      	movs	r0, #3
 80003b2:	f000 f9cb 	bl	800074c <lcd_limpa_linha>
				  }
				  dig = dig + 1;
 80003b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003b8:	3301      	adds	r3, #1
 80003ba:	647b      	str	r3, [r7, #68]	; 0x44
    	  for (int i = 0; i < 4 ; i++)
 80003bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003be:	3301      	adds	r3, #1
 80003c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80003c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	f77f af5c 	ble.w	8000282 <keypadLoopF+0x2e>
      for (int j = 0 ; j < 4 ; j++)
 80003ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003cc:	3301      	adds	r3, #1
 80003ce:	643b      	str	r3, [r7, #64]	; 0x40
 80003d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003d2:	2b03      	cmp	r3, #3
 80003d4:	f77f af4f 	ble.w	8000276 <keypadLoopF+0x22>
			  }
    	  }
      }
  }
  while (dig<4);
 80003d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003da:	2b03      	cmp	r3, #3
 80003dc:	f77f af48 	ble.w	8000270 <keypadLoopF+0x1c>

  int senha = (1000 * (key[0])) + (100 * (key[1])) + (10 * (key[2])) + (key[3]);
 80003e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003e6:	fb02 f203 	mul.w	r2, r2, r3
 80003ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ec:	2164      	movs	r1, #100	; 0x64
 80003ee:	fb01 f303 	mul.w	r3, r1, r3
 80003f2:	18d1      	adds	r1, r2, r3
 80003f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80003f6:	4613      	mov	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	4413      	add	r3, r2
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	18ca      	adds	r2, r1, r3
 8000400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000402:	4413      	add	r3, r2
 8000404:	63bb      	str	r3, [r7, #56]	; 0x38
  lcd_limpa_display();
 8000406:	f000 f9d1 	bl	80007ac <lcd_limpa_display>
  lcd_posicao_do_cursor(0, 0);
 800040a:	2100      	movs	r1, #0
 800040c:	2000      	movs	r0, #0
 800040e:	f000 f8ff 	bl	8000610 <lcd_posicao_do_cursor>
  lcd_escreve_string("Converted password\r");
 8000412:	480a      	ldr	r0, [pc, #40]	; (800043c <keypadLoopF+0x1e8>)
 8000414:	f000 f9d1 	bl	80007ba <lcd_escreve_string>
  HAL_Delay(150);
 8000418:	2096      	movs	r0, #150	; 0x96
 800041a:	f000 feb1 	bl	8001180 <HAL_Delay>

  return senha;
 800041e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8000420:	4618      	mov	r0, r3
 8000422:	3748      	adds	r7, #72	; 0x48
 8000424:	46bd      	mov	sp, r7
 8000426:	bdb0      	pop	{r4, r5, r7, pc}
 8000428:	08002b48 	.word	0x08002b48
 800042c:	08002b6c 	.word	0x08002b6c
 8000430:	08002b7c 	.word	0x08002b7c
 8000434:	08002b8c 	.word	0x08002b8c
 8000438:	08002b9c 	.word	0x08002b9c
 800043c:	08002bac 	.word	0x08002bac

08000440 <lcd_escreve_dado>:

   void lcd_escreve_dado(char dado);  		// escrever um caractere individualmente
   void lcd_escreve_instrucao(char instr); 	// escreve um dado de controle (clear display, pos. cursor, etc)

void lcd_escreve_dado(char dado)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
	Output_RS_PIN(1);
 800044a:	2201      	movs	r2, #1
 800044c:	2101      	movs	r1, #1
 800044e:	4835      	ldr	r0, [pc, #212]	; (8000524 <lcd_escreve_dado+0xe4>)
 8000450:	f001 f905 	bl	800165e <HAL_GPIO_WritePin>
	Output_EN_PIN(0);
 8000454:	2200      	movs	r2, #0
 8000456:	2102      	movs	r1, #2
 8000458:	4832      	ldr	r0, [pc, #200]	; (8000524 <lcd_escreve_dado+0xe4>)
 800045a:	f001 f900 	bl	800165e <HAL_GPIO_WritePin>

	// Posiciona os bits da vari√°vel de entrada nos pinos de sa√≠da (apenas 8 bits s√£o enviados -> 4 EN 4 EN)
	Output_D7_PIN(dado & 0x80);
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000464:	b2db      	uxtb	r3, r3
 8000466:	461a      	mov	r2, r3
 8000468:	2120      	movs	r1, #32
 800046a:	482e      	ldr	r0, [pc, #184]	; (8000524 <lcd_escreve_dado+0xe4>)
 800046c:	f001 f8f7 	bl	800165e <HAL_GPIO_WritePin>
	Output_D6_PIN(dado & 0x40);
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000476:	b2db      	uxtb	r3, r3
 8000478:	461a      	mov	r2, r3
 800047a:	2110      	movs	r1, #16
 800047c:	4829      	ldr	r0, [pc, #164]	; (8000524 <lcd_escreve_dado+0xe4>)
 800047e:	f001 f8ee 	bl	800165e <HAL_GPIO_WritePin>
	Output_D5_PIN(dado & 0x20);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	b2db      	uxtb	r3, r3
 800048a:	461a      	mov	r2, r3
 800048c:	2108      	movs	r1, #8
 800048e:	4825      	ldr	r0, [pc, #148]	; (8000524 <lcd_escreve_dado+0xe4>)
 8000490:	f001 f8e5 	bl	800165e <HAL_GPIO_WritePin>
	Output_D4_PIN(dado & 0x10);
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	f003 0310 	and.w	r3, r3, #16
 800049a:	b2db      	uxtb	r3, r3
 800049c:	461a      	mov	r2, r3
 800049e:	2104      	movs	r1, #4
 80004a0:	4820      	ldr	r0, [pc, #128]	; (8000524 <lcd_escreve_dado+0xe4>)
 80004a2:	f001 f8dc 	bl	800165e <HAL_GPIO_WritePin>

	// Pulso Enable
	Output_EN_PIN(1);
 80004a6:	2201      	movs	r2, #1
 80004a8:	2102      	movs	r1, #2
 80004aa:	481e      	ldr	r0, [pc, #120]	; (8000524 <lcd_escreve_dado+0xe4>)
 80004ac:	f001 f8d7 	bl	800165e <HAL_GPIO_WritePin>
    Output_EN_PIN(0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2102      	movs	r1, #2
 80004b4:	481b      	ldr	r0, [pc, #108]	; (8000524 <lcd_escreve_dado+0xe4>)
 80004b6:	f001 f8d2 	bl	800165e <HAL_GPIO_WritePin>

    Output_D7_PIN(dado & 0x08);
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	f003 0308 	and.w	r3, r3, #8
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	461a      	mov	r2, r3
 80004c4:	2120      	movs	r1, #32
 80004c6:	4817      	ldr	r0, [pc, #92]	; (8000524 <lcd_escreve_dado+0xe4>)
 80004c8:	f001 f8c9 	bl	800165e <HAL_GPIO_WritePin>
    Output_D6_PIN(dado & 0x04);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	f003 0304 	and.w	r3, r3, #4
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	461a      	mov	r2, r3
 80004d6:	2110      	movs	r1, #16
 80004d8:	4812      	ldr	r0, [pc, #72]	; (8000524 <lcd_escreve_dado+0xe4>)
 80004da:	f001 f8c0 	bl	800165e <HAL_GPIO_WritePin>
    Output_D5_PIN(dado & 0x02);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	f003 0302 	and.w	r3, r3, #2
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	461a      	mov	r2, r3
 80004e8:	2108      	movs	r1, #8
 80004ea:	480e      	ldr	r0, [pc, #56]	; (8000524 <lcd_escreve_dado+0xe4>)
 80004ec:	f001 f8b7 	bl	800165e <HAL_GPIO_WritePin>
    Output_D4_PIN(dado & 0x01);
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	461a      	mov	r2, r3
 80004fa:	2104      	movs	r1, #4
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <lcd_escreve_dado+0xe4>)
 80004fe:	f001 f8ae 	bl	800165e <HAL_GPIO_WritePin>

    // Pulso Enable
    Output_EN_PIN(1);
 8000502:	2201      	movs	r2, #1
 8000504:	2102      	movs	r1, #2
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <lcd_escreve_dado+0xe4>)
 8000508:	f001 f8a9 	bl	800165e <HAL_GPIO_WritePin>
    Output_EN_PIN(0);
 800050c:	2200      	movs	r2, #0
 800050e:	2102      	movs	r1, #2
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <lcd_escreve_dado+0xe4>)
 8000512:	f001 f8a4 	bl	800165e <HAL_GPIO_WritePin>
    
    //espera_flag
    HAL_Delay(2);
 8000516:	2002      	movs	r0, #2
 8000518:	f000 fe32 	bl	8001180 <HAL_Delay>

}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40010800 	.word	0x40010800

08000528 <lcd_escreve_instrucao>:



void lcd_escreve_instrucao(char instr)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
	Output_RS_PIN(0u);
 8000532:	2200      	movs	r2, #0
 8000534:	2101      	movs	r1, #1
 8000536:	4835      	ldr	r0, [pc, #212]	; (800060c <lcd_escreve_instrucao+0xe4>)
 8000538:	f001 f891 	bl	800165e <HAL_GPIO_WritePin>
	Output_EN_PIN(0u);
 800053c:	2200      	movs	r2, #0
 800053e:	2102      	movs	r1, #2
 8000540:	4832      	ldr	r0, [pc, #200]	; (800060c <lcd_escreve_instrucao+0xe4>)
 8000542:	f001 f88c 	bl	800165e <HAL_GPIO_WritePin>

	// Posiciona os bits da vari√°vel de entrada nos pinos de sa√≠da (apenas 8 bits s√£o enviados -> 4 EN 4 EN)
	Output_D7_PIN(instr & 0x80);
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800054c:	b2db      	uxtb	r3, r3
 800054e:	461a      	mov	r2, r3
 8000550:	2120      	movs	r1, #32
 8000552:	482e      	ldr	r0, [pc, #184]	; (800060c <lcd_escreve_instrucao+0xe4>)
 8000554:	f001 f883 	bl	800165e <HAL_GPIO_WritePin>
	Output_D6_PIN(instr & 0x40);
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800055e:	b2db      	uxtb	r3, r3
 8000560:	461a      	mov	r2, r3
 8000562:	2110      	movs	r1, #16
 8000564:	4829      	ldr	r0, [pc, #164]	; (800060c <lcd_escreve_instrucao+0xe4>)
 8000566:	f001 f87a 	bl	800165e <HAL_GPIO_WritePin>
	Output_D5_PIN(instr & 0x20);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f003 0320 	and.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	2108      	movs	r1, #8
 8000576:	4825      	ldr	r0, [pc, #148]	; (800060c <lcd_escreve_instrucao+0xe4>)
 8000578:	f001 f871 	bl	800165e <HAL_GPIO_WritePin>
	Output_D4_PIN(instr & 0x10);
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	f003 0310 	and.w	r3, r3, #16
 8000582:	b2db      	uxtb	r3, r3
 8000584:	461a      	mov	r2, r3
 8000586:	2104      	movs	r1, #4
 8000588:	4820      	ldr	r0, [pc, #128]	; (800060c <lcd_escreve_instrucao+0xe4>)
 800058a:	f001 f868 	bl	800165e <HAL_GPIO_WritePin>

	Output_EN_PIN(1);
 800058e:	2201      	movs	r2, #1
 8000590:	2102      	movs	r1, #2
 8000592:	481e      	ldr	r0, [pc, #120]	; (800060c <lcd_escreve_instrucao+0xe4>)
 8000594:	f001 f863 	bl	800165e <HAL_GPIO_WritePin>
	Output_EN_PIN(0);
 8000598:	2200      	movs	r2, #0
 800059a:	2102      	movs	r1, #2
 800059c:	481b      	ldr	r0, [pc, #108]	; (800060c <lcd_escreve_instrucao+0xe4>)
 800059e:	f001 f85e 	bl	800165e <HAL_GPIO_WritePin>

	Output_D7_PIN(instr & 0x08);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	f003 0308 	and.w	r3, r3, #8
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	461a      	mov	r2, r3
 80005ac:	2120      	movs	r1, #32
 80005ae:	4817      	ldr	r0, [pc, #92]	; (800060c <lcd_escreve_instrucao+0xe4>)
 80005b0:	f001 f855 	bl	800165e <HAL_GPIO_WritePin>
	Output_D6_PIN(instr & 0x04);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	461a      	mov	r2, r3
 80005be:	2110      	movs	r1, #16
 80005c0:	4812      	ldr	r0, [pc, #72]	; (800060c <lcd_escreve_instrucao+0xe4>)
 80005c2:	f001 f84c 	bl	800165e <HAL_GPIO_WritePin>
	Output_D5_PIN(instr & 0x02);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 0302 	and.w	r3, r3, #2
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	2108      	movs	r1, #8
 80005d2:	480e      	ldr	r0, [pc, #56]	; (800060c <lcd_escreve_instrucao+0xe4>)
 80005d4:	f001 f843 	bl	800165e <HAL_GPIO_WritePin>
	Output_D4_PIN(instr & 0x01);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	461a      	mov	r2, r3
 80005e2:	2104      	movs	r1, #4
 80005e4:	4809      	ldr	r0, [pc, #36]	; (800060c <lcd_escreve_instrucao+0xe4>)
 80005e6:	f001 f83a 	bl	800165e <HAL_GPIO_WritePin>

	// Pulso Enable
	Output_EN_PIN(1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2102      	movs	r1, #2
 80005ee:	4807      	ldr	r0, [pc, #28]	; (800060c <lcd_escreve_instrucao+0xe4>)
 80005f0:	f001 f835 	bl	800165e <HAL_GPIO_WritePin>
	Output_EN_PIN(0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2102      	movs	r1, #2
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <lcd_escreve_instrucao+0xe4>)
 80005fa:	f001 f830 	bl	800165e <HAL_GPIO_WritePin>

	//espera flag
	HAL_Delay(2);
 80005fe:	2002      	movs	r0, #2
 8000600:	f000 fdbe 	bl	8001180 <HAL_Delay>

}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40010800 	.word	0x40010800

08000610 <lcd_posicao_do_cursor>:

void lcd_posicao_do_cursor(char lin, char col)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	460a      	mov	r2, r1
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]
	unsigned char addr;
	  switch(lin)
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d816      	bhi.n	8000654 <lcd_posicao_do_cursor+0x44>
 8000626:	a201      	add	r2, pc, #4	; (adr r2, 800062c <lcd_posicao_do_cursor+0x1c>)
 8000628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062c:	0800063d 	.word	0x0800063d
 8000630:	08000643 	.word	0x08000643
 8000634:	08000649 	.word	0x08000649
 8000638:	0800064f 	.word	0x0800064f
	  {
	     case 0: addr = 0x00; break; 	// Primeira Linha
 800063c:	2300      	movs	r3, #0
 800063e:	73fb      	strb	r3, [r7, #15]
 8000640:	e008      	b.n	8000654 <lcd_posicao_do_cursor+0x44>
	     case 1: addr = 0x40; break; 	// Segunda Linha
 8000642:	2340      	movs	r3, #64	; 0x40
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	e005      	b.n	8000654 <lcd_posicao_do_cursor+0x44>
	     case 2: addr = 0x14; break; 	// Terceira Linha
 8000648:	2314      	movs	r3, #20
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e002      	b.n	8000654 <lcd_posicao_do_cursor+0x44>
	     case 3: addr = 0x54; break; 	// Quarta linha
 800064e:	2354      	movs	r3, #84	; 0x54
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	bf00      	nop
	     default: ;
	  }

	  addr += col;
 8000654:	7bfa      	ldrb	r2, [r7, #15]
 8000656:	79bb      	ldrb	r3, [r7, #6]
 8000658:	4413      	add	r3, r2
 800065a:	73fb      	strb	r3, [r7, #15]

	  lcd_escreve_instrucao(0x80 | addr);
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000662:	b2db      	uxtb	r3, r3
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff5f 	bl	8000528 <lcd_escreve_instrucao>
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop

08000674 <lcd_20x4_4bits_Init>:

void lcd_20x4_4bits_Init(void)        			 // Comunica√ß√£o de 4 bits, display de 2 ou mais linhas, mtx 8x5,
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

	HAL_Delay(40);
 8000678:	2028      	movs	r0, #40	; 0x28
 800067a:	f000 fd81 	bl	8001180 <HAL_Delay>

	lcd_escreve_instrucao_Init(0x30);
 800067e:	2030      	movs	r0, #48	; 0x30
 8000680:	f000 f82a 	bl	80006d8 <lcd_escreve_instrucao_Init>
	HAL_Delay(5);
 8000684:	2005      	movs	r0, #5
 8000686:	f000 fd7b 	bl	8001180 <HAL_Delay>
	lcd_escreve_instrucao_Init(0x30);
 800068a:	2030      	movs	r0, #48	; 0x30
 800068c:	f000 f824 	bl	80006d8 <lcd_escreve_instrucao_Init>
	HAL_Delay(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f000 fd75 	bl	8001180 <HAL_Delay>
	lcd_escreve_instrucao_Init(0x30);
 8000696:	2030      	movs	r0, #48	; 0x30
 8000698:	f000 f81e 	bl	80006d8 <lcd_escreve_instrucao_Init>
	HAL_Delay(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f000 fd6f 	bl	8001180 <HAL_Delay>
	lcd_escreve_instrucao_Init(0x20);
 80006a2:	2020      	movs	r0, #32
 80006a4:	f000 f818 	bl	80006d8 <lcd_escreve_instrucao_Init>
	HAL_Delay(1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f000 fd69 	bl	8001180 <HAL_Delay>

	lcd_escreve_instrucao(0x28);                // 4 bists, display de 2 ou mais linhas e mtx 8x5
 80006ae:	2028      	movs	r0, #40	; 0x28
 80006b0:	f7ff ff3a 	bl	8000528 <lcd_escreve_instrucao>
	lcd_escreve_instrucao(0x08);                // Desliga o display
 80006b4:	2008      	movs	r0, #8
 80006b6:	f7ff ff37 	bl	8000528 <lcd_escreve_instrucao>
	lcd_escreve_instrucao(0x0E);                // Liga o display e cursor
 80006ba:	200e      	movs	r0, #14
 80006bc:	f7ff ff34 	bl	8000528 <lcd_escreve_instrucao>
	lcd_escreve_instrucao(0x06);                // Desloca cursor para direita qunado caract. ÔøΩ inserido
 80006c0:	2006      	movs	r0, #6
 80006c2:	f7ff ff31 	bl	8000528 <lcd_escreve_instrucao>

	lcd_escreve_instrucao(0x0C);              // Desliga o cursor, caso deseja deixar ligado, comentar essa linha
 80006c6:	200c      	movs	r0, #12
 80006c8:	f7ff ff2e 	bl	8000528 <lcd_escreve_instrucao>

	lcd_escreve_instrucao(0x01);                // Limpa a tela do display e desloca para posiÔøΩÔøΩo 1x1
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff2b 	bl	8000528 <lcd_escreve_instrucao>
 
}    
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <lcd_escreve_instrucao_Init>:

void lcd_escreve_instrucao_Init(char opcode){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]

	// Posiciona os bits da var√≠avel de entrada nos pinos de sa√≠da (apenas 4 bits s√£o enviados)
	Output_D7_PIN(opcode & 0x80);
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	2120      	movs	r1, #32
 80006ee:	4816      	ldr	r0, [pc, #88]	; (8000748 <lcd_escreve_instrucao_Init+0x70>)
 80006f0:	f000 ffb5 	bl	800165e <HAL_GPIO_WritePin>
	Output_D6_PIN(opcode & 0x40);
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	2110      	movs	r1, #16
 8000700:	4811      	ldr	r0, [pc, #68]	; (8000748 <lcd_escreve_instrucao_Init+0x70>)
 8000702:	f000 ffac 	bl	800165e <HAL_GPIO_WritePin>
	Output_D5_PIN(opcode & 0x20);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f003 0320 	and.w	r3, r3, #32
 800070c:	b2db      	uxtb	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	2108      	movs	r1, #8
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <lcd_escreve_instrucao_Init+0x70>)
 8000714:	f000 ffa3 	bl	800165e <HAL_GPIO_WritePin>
	Output_D4_PIN(opcode & 0x10);
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	b2db      	uxtb	r3, r3
 8000720:	461a      	mov	r2, r3
 8000722:	2104      	movs	r1, #4
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <lcd_escreve_instrucao_Init+0x70>)
 8000726:	f000 ff9a 	bl	800165e <HAL_GPIO_WritePin>

	// Pulso no enable
	Output_EN_PIN(1);
 800072a:	2201      	movs	r2, #1
 800072c:	2102      	movs	r1, #2
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <lcd_escreve_instrucao_Init+0x70>)
 8000730:	f000 ff95 	bl	800165e <HAL_GPIO_WritePin>
	Output_EN_PIN(0);
 8000734:	2200      	movs	r2, #0
 8000736:	2102      	movs	r1, #2
 8000738:	4803      	ldr	r0, [pc, #12]	; (8000748 <lcd_escreve_instrucao_Init+0x70>)
 800073a:	f000 ff90 	bl	800165e <HAL_GPIO_WritePin>

}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40010800 	.word	0x40010800

0800074c <lcd_limpa_linha>:

void lcd_limpa_linha(int i)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	char* c;
	int j;
	lcd_posicao_do_cursor(i, 19);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2113      	movs	r1, #19
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff58 	bl	8000610 <lcd_posicao_do_cursor>
	for (j = 19; j<0; j--)
 8000760:	2313      	movs	r3, #19
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e011      	b.n	800078a <lcd_limpa_linha+0x3e>
	{
		if (*c != '\r')
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b0d      	cmp	r3, #13
 800076c:	d00a      	beq.n	8000784 <lcd_limpa_linha+0x38>
		{
			lcd_posicao_do_cursor(i, j);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	68fa      	ldr	r2, [r7, #12]
 8000774:	b2d2      	uxtb	r2, r2
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff ff49 	bl	8000610 <lcd_posicao_do_cursor>
			lcd_escreve_string("");
 800077e:	480a      	ldr	r0, [pc, #40]	; (80007a8 <lcd_limpa_linha+0x5c>)
 8000780:	f000 f81b 	bl	80007ba <lcd_escreve_string>
	for (j = 19; j<0; j--)
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3b01      	subs	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2b00      	cmp	r3, #0
 800078e:	dbea      	blt.n	8000766 <lcd_limpa_linha+0x1a>
		}
	}

	lcd_posicao_do_cursor(i, j);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	b2d2      	uxtb	r2, r2
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff38 	bl	8000610 <lcd_posicao_do_cursor>
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	08002bc0 	.word	0x08002bc0

080007ac <lcd_limpa_display>:
    
void lcd_limpa_display(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
    lcd_escreve_instrucao(0x01);            // Limpa a tela do display e desloca para posi√ß√£o 0x0
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff feb9 	bl	8000528 <lcd_escreve_instrucao>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}

080007ba <lcd_escreve_string>:
{
	lcd_limpa_display();
	lcd_escreve_string("VC ESCOLHEU A OP 1\r");
}

void lcd_escreve_string(char* c){
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]

	while (*c != '\r'){
 80007c2:	e007      	b.n	80007d4 <lcd_escreve_string+0x1a>
		lcd_escreve_dado((char)*c);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fe39 	bl	8000440 <lcd_escreve_dado>
		c++;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3301      	adds	r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
	while (*c != '\r'){
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b0d      	cmp	r3, #13
 80007da:	d1f3      	bne.n	80007c4 <lcd_escreve_string+0xa>
	}
        
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f000 fc67 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f8c7 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f2:	f000 f92b 	bl	8000a4c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007f6:	f000 f8ff 	bl	80009f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_20x4_4bits_Init(); // Iniciando o display
 80007fa:	f7ff ff3b 	bl	8000674 <lcd_20x4_4bits_Init>

  // Senha padr√£o
  int senha = 1234;
 80007fe:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8000802:	60fb      	str	r3, [r7, #12]

  // Mensagem inicial do menu
  menuInit();
 8000804:	f000 f994 	bl	8000b30 <menuInit>

  // Mensagem inicial do terminal
  terminalPrintInit();
 8000808:	f000 fb7e 	bl	8000f08 <terminalPrintInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(Led_locked_GPIO_Port, Led_locked_Pin, 1);
 800080c:	2201      	movs	r2, #1
 800080e:	2102      	movs	r1, #2
 8000810:	4857      	ldr	r0, [pc, #348]	; (8000970 <main+0x18c>)
 8000812:	f000 ff24 	bl	800165e <HAL_GPIO_WritePin>
	  menuPassword();
 8000816:	f000 f9df 	bl	8000bd8 <menuPassword>

	  int entrada;

	  entrada = keypadLoopF();
 800081a:	f7ff fd1b 	bl	8000254 <keypadLoopF>
 800081e:	60b8      	str	r0, [r7, #8]

	  if(senha == entrada)
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	429a      	cmp	r2, r3
 8000826:	d17a      	bne.n	800091e <main+0x13a>
	  {

		  terminalPasswordLog(senha, 1);
 8000828:	2101      	movs	r1, #1
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f000 fbb8 	bl	8000fa0 <terminalPasswordLog>
		  menuMain();
 8000830:	f000 f99a 	bl	8000b68 <menuMain>

		  int op;

		  // Capturando a op√ß√£o digitada pelo usu√°rio
		  op = keypadLoopO();
 8000834:	f7ff fcbc 	bl	80001b0 <keypadLoopO>
 8000838:	6078      	str	r0, [r7, #4]

		  switch (op)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3b01      	subs	r3, #1
 800083e:	2b03      	cmp	r3, #3
 8000840:	f200 808f 	bhi.w	8000962 <main+0x17e>
 8000844:	a201      	add	r2, pc, #4	; (adr r2, 800084c <main+0x68>)
 8000846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084a:	bf00      	nop
 800084c:	0800085d 	.word	0x0800085d
 8000850:	080008f1 	.word	0x080008f1
 8000854:	08000901 	.word	0x08000901
 8000858:	08000907 	.word	0x08000907
		  {
		  case 1:
			  // Caso queira abrir a porta

			  HAL_GPIO_WritePin(Led_locked_GPIO_Port, Led_locked_Pin, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2102      	movs	r1, #2
 8000860:	4843      	ldr	r0, [pc, #268]	; (8000970 <main+0x18c>)
 8000862:	f000 fefc 	bl	800165e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Led_open_GPIO_Port, Led_open_Pin, 1);
 8000866:	2201      	movs	r2, #1
 8000868:	2101      	movs	r1, #1
 800086a:	4841      	ldr	r0, [pc, #260]	; (8000970 <main+0x18c>)
 800086c:	f000 fef7 	bl	800165e <HAL_GPIO_WritePin>

			  terminalPrintNL(2);
 8000870:	2002      	movs	r0, #2
 8000872:	f000 fb31 	bl	8000ed8 <terminalPrintNL>
			  terminalPrint("Door open!");
 8000876:	483f      	ldr	r0, [pc, #252]	; (8000974 <main+0x190>)
 8000878:	f000 fb08 	bl	8000e8c <terminalPrint>
			  terminalPrintNL(2);
 800087c:	2002      	movs	r0, #2
 800087e:	f000 fb2b 	bl	8000ed8 <terminalPrintNL>

			  HAL_GPIO_TogglePin(Atuador_GPIO_Port, Atuador_Pin);
 8000882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000886:	483c      	ldr	r0, [pc, #240]	; (8000978 <main+0x194>)
 8000888:	f000 ff01 	bl	800168e <HAL_GPIO_TogglePin>
			  HAL_Delay(200);
 800088c:	20c8      	movs	r0, #200	; 0xc8
 800088e:	f000 fc77 	bl	8001180 <HAL_Delay>
			  HAL_GPIO_TogglePin(Atuador_GPIO_Port, Atuador_Pin);
 8000892:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000896:	4838      	ldr	r0, [pc, #224]	; (8000978 <main+0x194>)
 8000898:	f000 fef9 	bl	800168e <HAL_GPIO_TogglePin>
			  HAL_Delay(200);
 800089c:	20c8      	movs	r0, #200	; 0xc8
 800089e:	f000 fc6f 	bl	8001180 <HAL_Delay>
			  HAL_GPIO_TogglePin(Atuador_GPIO_Port, Atuador_Pin);
 80008a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008a6:	4834      	ldr	r0, [pc, #208]	; (8000978 <main+0x194>)
 80008a8:	f000 fef1 	bl	800168e <HAL_GPIO_TogglePin>
			  HAL_Delay(200);
 80008ac:	20c8      	movs	r0, #200	; 0xc8
 80008ae:	f000 fc67 	bl	8001180 <HAL_Delay>
			  HAL_GPIO_TogglePin(Atuador_GPIO_Port, Atuador_Pin);
 80008b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b6:	4830      	ldr	r0, [pc, #192]	; (8000978 <main+0x194>)
 80008b8:	f000 fee9 	bl	800168e <HAL_GPIO_TogglePin>
			  HAL_Delay(200);
 80008bc:	20c8      	movs	r0, #200	; 0xc8
 80008be:	f000 fc5f 	bl	8001180 <HAL_Delay>

			  // Aguardando a porta ser fechada
			  while (HAL_GPIO_ReadPin(Btn_locked_GPIO_Port, Btn_locked_Pin) != 1);
 80008c2:	bf00      	nop
 80008c4:	2104      	movs	r1, #4
 80008c6:	482a      	ldr	r0, [pc, #168]	; (8000970 <main+0x18c>)
 80008c8:	f000 feb2 	bl	8001630 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d1f8      	bne.n	80008c4 <main+0xe0>

			  terminalPrintNL(2);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f000 fb00 	bl	8000ed8 <terminalPrintNL>
			  terminalPrint("Door closed!");
 80008d8:	4828      	ldr	r0, [pc, #160]	; (800097c <main+0x198>)
 80008da:	f000 fad7 	bl	8000e8c <terminalPrint>
			  terminalPrintNL(2);
 80008de:	2002      	movs	r0, #2
 80008e0:	f000 fafa 	bl	8000ed8 <terminalPrintNL>

			  HAL_GPIO_WritePin(Led_open_GPIO_Port, Led_open_Pin, 0);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2101      	movs	r1, #1
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <main+0x18c>)
 80008ea:	f000 feb8 	bl	800165e <HAL_GPIO_WritePin>

			  break;
 80008ee:	e038      	b.n	8000962 <main+0x17e>
		  case 2:
			  // Caso deseje alterar a senha


			  menu2();
 80008f0:	f000 f9a0 	bl	8000c34 <menu2>
			  terminalPasswordChanged();
 80008f4:	f000 fbac 	bl	8001050 <terminalPasswordChanged>
			  senha = keypadLoopF();
 80008f8:	f7ff fcac 	bl	8000254 <keypadLoopF>
 80008fc:	60f8      	str	r0, [r7, #12]
			  break;
 80008fe:	e030      	b.n	8000962 <main+0x17e>
		  case 3:
			  // Registro dos usu√°rios

			  menu3();
 8000900:	f000 f9b4 	bl	8000c6c <menu3>
			  break;
 8000904:	e02d      	b.n	8000962 <main+0x17e>
		  case 4:
			  // Restaurando a fechadura para o padr√£o de f√°brica

			  menu4();
 8000906:	f000 f9c1 	bl	8000c8c <menu4>
			  terminalResetPassword();
 800090a:	f000 fb91 	bl	8001030 <terminalResetPassword>
			  HAL_Delay(200);
 800090e:	20c8      	movs	r0, #200	; 0xc8
 8000910:	f000 fc36 	bl	8001180 <HAL_Delay>
			  senha = 1234;
 8000914:	f240 43d2 	movw	r3, #1234	; 0x4d2
 8000918:	60fb      	str	r3, [r7, #12]
			  break;
 800091a:	bf00      	nop
 800091c:	e021      	b.n	8000962 <main+0x17e>
	  }
	  else
	  {
		 // Usuario errou a senha

		 HAL_GPIO_TogglePin(Led_locked_GPIO_Port, Led_locked_Pin);
 800091e:	2102      	movs	r1, #2
 8000920:	4813      	ldr	r0, [pc, #76]	; (8000970 <main+0x18c>)
 8000922:	f000 feb4 	bl	800168e <HAL_GPIO_TogglePin>
		 HAL_Delay(100);
 8000926:	2064      	movs	r0, #100	; 0x64
 8000928:	f000 fc2a 	bl	8001180 <HAL_Delay>
		 HAL_GPIO_TogglePin(Led_locked_GPIO_Port, Led_locked_Pin);
 800092c:	2102      	movs	r1, #2
 800092e:	4810      	ldr	r0, [pc, #64]	; (8000970 <main+0x18c>)
 8000930:	f000 fead 	bl	800168e <HAL_GPIO_TogglePin>
		 HAL_Delay(100);
 8000934:	2064      	movs	r0, #100	; 0x64
 8000936:	f000 fc23 	bl	8001180 <HAL_Delay>
		 HAL_GPIO_TogglePin(Led_locked_GPIO_Port, Led_locked_Pin);
 800093a:	2102      	movs	r1, #2
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <main+0x18c>)
 800093e:	f000 fea6 	bl	800168e <HAL_GPIO_TogglePin>
		 HAL_Delay(100);
 8000942:	2064      	movs	r0, #100	; 0x64
 8000944:	f000 fc1c 	bl	8001180 <HAL_Delay>
		 HAL_GPIO_TogglePin(Led_locked_GPIO_Port, Led_locked_Pin);
 8000948:	2102      	movs	r1, #2
 800094a:	4809      	ldr	r0, [pc, #36]	; (8000970 <main+0x18c>)
 800094c:	f000 fe9f 	bl	800168e <HAL_GPIO_TogglePin>
		 HAL_Delay(100);
 8000950:	2064      	movs	r0, #100	; 0x64
 8000952:	f000 fc15 	bl	8001180 <HAL_Delay>
		 terminalPasswordLog(senha, 0);
 8000956:	2100      	movs	r1, #0
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f000 fb21 	bl	8000fa0 <terminalPasswordLog>
		 menuPasswordFail();
 800095e:	f000 f955 	bl	8000c0c <menuPasswordFail>
	  }

	  HAL_Delay(100);
 8000962:	2064      	movs	r0, #100	; 0x64
 8000964:	f000 fc0c 	bl	8001180 <HAL_Delay>
	  lcd_limpa_display();
 8000968:	f7ff ff20 	bl	80007ac <lcd_limpa_display>
  {
 800096c:	e74e      	b.n	800080c <main+0x28>
 800096e:	bf00      	nop
 8000970:	40010c00 	.word	0x40010c00
 8000974:	08002c38 	.word	0x08002c38
 8000978:	40010800 	.word	0x40010800
 800097c:	08002c44 	.word	0x08002c44

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b090      	sub	sp, #64	; 0x40
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0318 	add.w	r3, r7, #24
 800098a:	2228      	movs	r2, #40	; 0x28
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fc94 	bl	80022bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a6:	2301      	movs	r3, #1
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009aa:	2310      	movs	r3, #16
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fe82 	bl	80016c0 <HAL_RCC_OscConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009c2:	f000 f8b1 	bl	8000b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c6:	230f      	movs	r3, #15
 80009c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 f8ee 	bl	8001bc0 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009ea:	f000 f89d 	bl	8000b28 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3740      	adds	r7, #64	; 0x40
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_USART1_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART1_UART_Init+0x4c>)
 8000a30:	f001 fa62 	bl	8001ef8 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f875 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000098 	.word	0x20000098
 8000a48:	40013800 	.word	0x40013800

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a27      	ldr	r2, [pc, #156]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000a7e:	f043 0308 	orr.w	r3, r3, #8
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_GPIO_Init+0xd0>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0308 	and.w	r3, r3, #8
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000a90:	2200      	movs	r2, #0
 8000a92:	f248 31ff 	movw	r1, #33791	; 0x83ff
 8000a96:	4822      	ldr	r0, [pc, #136]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000a98:	f000 fde1 	bl	800165e <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|KOut1_Pin|KOut2_Pin
                          |KOut3_Pin|KOut4_Pin|Atuador_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_open_Pin|Led_locked_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	4820      	ldr	r0, [pc, #128]	; (8000b24 <MX_GPIO_Init+0xd8>)
 8000aa2:	f000 fddc 	bl	800165e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin KOut1_Pin KOut2_Pin
                           KOut3_Pin KOut4_Pin Atuador_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000aa6:	f248 33ff 	movw	r3, #33791	; 0x83ff
 8000aaa:	60bb      	str	r3, [r7, #8]
                          |LCD_D6_Pin|LCD_D7_Pin|KOut1_Pin|KOut2_Pin
                          |KOut3_Pin|KOut4_Pin|Atuador_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	4619      	mov	r1, r3
 8000abe:	4818      	ldr	r0, [pc, #96]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000ac0:	f000 fc64 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_open_Pin Led_locked_Pin */
  GPIO_InitStruct.Pin = Led_open_Pin|Led_locked_Pin;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0308 	add.w	r3, r7, #8
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4812      	ldr	r0, [pc, #72]	; (8000b24 <MX_GPIO_Init+0xd8>)
 8000adc:	f000 fc56 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pin : Btn_locked_Pin */
  GPIO_InitStruct.Pin = Btn_locked_Pin;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Btn_locked_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	4619      	mov	r1, r3
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <MX_GPIO_Init+0xd8>)
 8000af4:	f000 fc4a 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : KIn1_Pin KIn2_Pin KIn3_Pin KIn4_Pin */
  GPIO_InitStruct.Pin = KIn1_Pin|KIn2_Pin|KIn3_Pin|KIn4_Pin;
 8000af8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000afc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_GPIO_Init+0xd4>)
 8000b0e:	f000 fc3d 	bl	800138c <HAL_GPIO_Init>

}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40010800 	.word	0x40010800
 8000b24:	40010c00 	.word	0x40010c00

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <Error_Handler+0x6>

08000b30 <menuInit>:
#include "menu.h"
#include "lcd_v1.2.h"
#include "stm32f1xx_hal.h"

void menuInit ()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	 // Mensagem inicial (lcd)

	  lcd_posicao_do_cursor(0, 4);
 8000b34:	2104      	movs	r1, #4
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff fd6a 	bl	8000610 <lcd_posicao_do_cursor>
	  lcd_escreve_string("Hello, user.\r");
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <menuInit+0x30>)
 8000b3e:	f7ff fe3c 	bl	80007ba <lcd_escreve_string>
	  lcd_posicao_do_cursor(2, 6);
 8000b42:	2106      	movs	r1, #6
 8000b44:	2002      	movs	r0, #2
 8000b46:	f7ff fd63 	bl	8000610 <lcd_posicao_do_cursor>
	  lcd_escreve_string("Welcome!\r");
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <menuInit+0x34>)
 8000b4c:	f7ff fe35 	bl	80007ba <lcd_escreve_string>
	  HAL_Delay(500);
 8000b50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b54:	f000 fb14 	bl	8001180 <HAL_Delay>
	  lcd_limpa_display();
 8000b58:	f7ff fe28 	bl	80007ac <lcd_limpa_display>
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	08002c54 	.word	0x08002c54
 8000b64:	08002c64 	.word	0x08002c64

08000b68 <menuMain>:

void menuMain ()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	lcd_limpa_display ();
 8000b6c:	f7ff fe1e 	bl	80007ac <lcd_limpa_display>
	lcd_posicao_do_cursor(0, 0);
 8000b70:	2100      	movs	r1, #0
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff fd4c 	bl	8000610 <lcd_posicao_do_cursor>
	lcd_escreve_string("Success!\r");
 8000b78:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <menuMain+0x5c>)
 8000b7a:	f7ff fe1e 	bl	80007ba <lcd_escreve_string>
	HAL_Delay(1000);
 8000b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b82:	f000 fafd 	bl	8001180 <HAL_Delay>
	lcd_posicao_do_cursor(0, 0);
 8000b86:	2100      	movs	r1, #0
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f7ff fd41 	bl	8000610 <lcd_posicao_do_cursor>
	lcd_escreve_string("1. Open the door\r");
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <menuMain+0x60>)
 8000b90:	f7ff fe13 	bl	80007ba <lcd_escreve_string>
	lcd_posicao_do_cursor(1, 0);
 8000b94:	2100      	movs	r1, #0
 8000b96:	2001      	movs	r0, #1
 8000b98:	f7ff fd3a 	bl	8000610 <lcd_posicao_do_cursor>
	lcd_escreve_string("2. Change Password\r");
 8000b9c:	480b      	ldr	r0, [pc, #44]	; (8000bcc <menuMain+0x64>)
 8000b9e:	f7ff fe0c 	bl	80007ba <lcd_escreve_string>
	lcd_posicao_do_cursor(2, 0);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f7ff fd33 	bl	8000610 <lcd_posicao_do_cursor>
	lcd_escreve_string("3. System Log\r");
 8000baa:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <menuMain+0x68>)
 8000bac:	f7ff fe05 	bl	80007ba <lcd_escreve_string>
	lcd_posicao_do_cursor(3, 0);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	f7ff fd2c 	bl	8000610 <lcd_posicao_do_cursor>
	lcd_escreve_string("4. Reset Settings\r");
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <menuMain+0x6c>)
 8000bba:	f7ff fdfe 	bl	80007ba <lcd_escreve_string>
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	08002c70 	.word	0x08002c70
 8000bc8:	08002c7c 	.word	0x08002c7c
 8000bcc:	08002c90 	.word	0x08002c90
 8000bd0:	08002ca4 	.word	0x08002ca4
 8000bd4:	08002cb4 	.word	0x08002cb4

08000bd8 <menuPassword>:


void menuPassword ()
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	  // Mensagem para receber a senha do usu√°rio
	  lcd_posicao_do_cursor(0, 0);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff fd16 	bl	8000610 <lcd_posicao_do_cursor>
	  lcd_escreve_string("Enter password:\r");
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <menuPassword+0x2c>)
 8000be6:	f7ff fde8 	bl	80007ba <lcd_escreve_string>
	  lcd_posicao_do_cursor(2, 0);
 8000bea:	2100      	movs	r1, #0
 8000bec:	2002      	movs	r0, #2
 8000bee:	f7ff fd0f 	bl	8000610 <lcd_posicao_do_cursor>
	  lcd_escreve_string(">\r");
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <menuPassword+0x30>)
 8000bf4:	f7ff fde1 	bl	80007ba <lcd_escreve_string>
	  lcd_posicao_do_cursor(2, 2);
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f7ff fd08 	bl	8000610 <lcd_posicao_do_cursor>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	08002cc8 	.word	0x08002cc8
 8000c08:	08002cdc 	.word	0x08002cdc

08000c0c <menuPasswordFail>:

void menuPasswordFail ()
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	  HAL_Delay(1000);
 8000c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c14:	f000 fab4 	bl	8001180 <HAL_Delay>
	  lcd_limpa_display();
 8000c18:	f7ff fdc8 	bl	80007ac <lcd_limpa_display>
	  lcd_posicao_do_cursor(0, 0);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff fcf6 	bl	8000610 <lcd_posicao_do_cursor>
	  lcd_escreve_string("Incorrect password!\r");
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <menuPasswordFail+0x24>)
 8000c26:	f7ff fdc8 	bl	80007ba <lcd_escreve_string>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	08002ce0 	.word	0x08002ce0

08000c34 <menu2>:
	lcd_posicao_do_cursor(0, 0);
	lcd_escreve_string("Open door!\r");
}

void menu2 ()
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	lcd_limpa_display();
 8000c38:	f7ff fdb8 	bl	80007ac <lcd_limpa_display>
	lcd_posicao_do_cursor(0, 0);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fce6 	bl	8000610 <lcd_posicao_do_cursor>
	lcd_escreve_string("New password\r");
 8000c44:	4807      	ldr	r0, [pc, #28]	; (8000c64 <menu2+0x30>)
 8000c46:	f7ff fdb8 	bl	80007ba <lcd_escreve_string>
	lcd_posicao_do_cursor(2, 0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f7ff fcdf 	bl	8000610 <lcd_posicao_do_cursor>
	lcd_escreve_string(">\r");
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <menu2+0x34>)
 8000c54:	f7ff fdb1 	bl	80007ba <lcd_escreve_string>
	lcd_posicao_do_cursor(2, 2);
 8000c58:	2102      	movs	r1, #2
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f7ff fcd8 	bl	8000610 <lcd_posicao_do_cursor>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	08002d04 	.word	0x08002d04
 8000c68:	08002cdc 	.word	0x08002cdc

08000c6c <menu3>:

void menu3 ()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	lcd_limpa_display();
 8000c70:	f7ff fd9c 	bl	80007ac <lcd_limpa_display>
	lcd_posicao_do_cursor(0, 0);
 8000c74:	2100      	movs	r1, #0
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fcca 	bl	8000610 <lcd_posicao_do_cursor>
	lcd_escreve_string("Open door!\r");
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <menu3+0x1c>)
 8000c7e:	f7ff fd9c 	bl	80007ba <lcd_escreve_string>
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	08002cf8 	.word	0x08002cf8

08000c8c <menu4>:

void menu4 ()
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	lcd_limpa_display();
 8000c90:	f7ff fd8c 	bl	80007ac <lcd_limpa_display>
	lcd_posicao_do_cursor(0, 0);
 8000c94:	2100      	movs	r1, #0
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fcba 	bl	8000610 <lcd_posicao_do_cursor>
	lcd_escreve_string("Password changed!\r");
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <menu4+0x1c>)
 8000c9e:	f7ff fd8c 	bl	80007ba <lcd_escreve_string>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08002d14 	.word	0x08002d14

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6193      	str	r3, [r2, #24]
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_MspInit+0x5c>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_MspInit+0x60>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_MspInit+0x60>)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <HAL_UART_MspInit+0xa4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d13d      	bne.n	8000dac <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a20      	ldr	r2, [pc, #128]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a1a      	ldr	r2, [pc, #104]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	4812      	ldr	r0, [pc, #72]	; (8000dbc <HAL_UART_MspInit+0xac>)
 8000d74:	f000 fb0a 	bl	800138c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480c      	ldr	r0, [pc, #48]	; (8000dbc <HAL_UART_MspInit+0xac>)
 8000d8c:	f000 fafe 	bl	800138c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_UART_MspInit+0xb0>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
 8000da6:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_UART_MspInit+0xb0>)
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	; 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40013800 	.word	0x40013800
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010c00 	.word	0x40010c00
 8000dc0:	40010000 	.word	0x40010000

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0a:	f000 f99d 	bl	8001148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f001 fa10 	bl	8002268 <__errno>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20002800 	.word	0x20002800
 8000e74:	00000400 	.word	0x00000400
 8000e78:	2000008c 	.word	0x2000008c
 8000e7c:	200000e0 	.word	0x200000e0

08000e80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <terminalPrint>:
#include <stdio.h>

UART_HandleTypeDef huart1;

void terminalPrint (char string[])
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	// Letra
	unsigned char letra;

	// Contador
	int i = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]

	// Imprimindo a string no terminal
	for (i = 0 ; i < strlen(string) ; i++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	e00e      	b.n	8000ebc <terminalPrint+0x30>
	{
		// Letra em hexa
		letra = (unsigned char) string[i];
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	72fb      	strb	r3, [r7, #11]

		// Imprimindo o dado
		HAL_UART_Transmit (&huart1, &letra, 1, 10);
 8000ea8:	f107 010b 	add.w	r1, r7, #11
 8000eac:	230a      	movs	r3, #10
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <terminalPrint+0x48>)
 8000eb2:	f001 f86e 	bl	8001f92 <HAL_UART_Transmit>
	for (i = 0 ; i < strlen(string) ; i++)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff f945 	bl	800014c <strlen>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d8e9      	bhi.n	8000e9e <terminalPrint+0x12>
	}

}
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000098 	.word	0x20000098

08000ed8 <terminalPrintNL>:

void terminalPrintNL (int n)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	// Contador
	int j;

	// Pulando n linhas
	for (j = 0 ; j < n ; j++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e005      	b.n	8000ef2 <terminalPrintNL+0x1a>
	{
		terminalPrint("\r\n");
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <terminalPrintNL+0x2c>)
 8000ee8:	f7ff ffd0 	bl	8000e8c <terminalPrint>
	for (j = 0 ; j < n ; j++)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	dbf5      	blt.n	8000ee6 <terminalPrintNL+0xe>
	}
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	08002d28 	.word	0x08002d28

08000f08 <terminalPrintInit>:

void terminalPrintInit ()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	// Mensagem inicial (terminal)
	terminalPrint("***************************************");
 8000f0c:	481e      	ldr	r0, [pc, #120]	; (8000f88 <terminalPrintInit+0x80>)
 8000f0e:	f7ff ffbd 	bl	8000e8c <terminalPrint>
	terminalPrintNL(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff ffe0 	bl	8000ed8 <terminalPrintNL>
	terminalPrint("*                                     *");
 8000f18:	481c      	ldr	r0, [pc, #112]	; (8000f8c <terminalPrintInit+0x84>)
 8000f1a:	f7ff ffb7 	bl	8000e8c <terminalPrint>
	terminalPrintNL(1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff ffda 	bl	8000ed8 <terminalPrintNL>
	terminalPrint("*        DEADBEEF - Enterprises       *");
 8000f24:	481a      	ldr	r0, [pc, #104]	; (8000f90 <terminalPrintInit+0x88>)
 8000f26:	f7ff ffb1 	bl	8000e8c <terminalPrint>
	terminalPrintNL(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f7ff ffd4 	bl	8000ed8 <terminalPrintNL>
	terminalPrint("*                                     *");
 8000f30:	4816      	ldr	r0, [pc, #88]	; (8000f8c <terminalPrintInit+0x84>)
 8000f32:	f7ff ffab 	bl	8000e8c <terminalPrint>
	terminalPrintNL(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff ffce 	bl	8000ed8 <terminalPrintNL>
	terminalPrint("*     Digital Door Lock - V 1.0.3.    *");
 8000f3c:	4815      	ldr	r0, [pc, #84]	; (8000f94 <terminalPrintInit+0x8c>)
 8000f3e:	f7ff ffa5 	bl	8000e8c <terminalPrint>
	terminalPrintNL(1);
 8000f42:	2001      	movs	r0, #1
 8000f44:	f7ff ffc8 	bl	8000ed8 <terminalPrintNL>
	terminalPrint("*                                     *");
 8000f48:	4810      	ldr	r0, [pc, #64]	; (8000f8c <terminalPrintInit+0x84>)
 8000f4a:	f7ff ff9f 	bl	8000e8c <terminalPrint>
	terminalPrintNL(1);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff ffc2 	bl	8000ed8 <terminalPrintNL>
	terminalPrint("*                                     *");
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <terminalPrintInit+0x84>)
 8000f56:	f7ff ff99 	bl	8000e8c <terminalPrint>
	terminalPrintNL(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f7ff ffbc 	bl	8000ed8 <terminalPrintNL>
	terminalPrint("***************************************");
 8000f60:	4809      	ldr	r0, [pc, #36]	; (8000f88 <terminalPrintInit+0x80>)
 8000f62:	f7ff ff93 	bl	8000e8c <terminalPrint>
	terminalPrintNL(2);
 8000f66:	2002      	movs	r0, #2
 8000f68:	f7ff ffb6 	bl	8000ed8 <terminalPrintNL>


	terminalPrint("Digital door lock started successfully!");
 8000f6c:	480a      	ldr	r0, [pc, #40]	; (8000f98 <terminalPrintInit+0x90>)
 8000f6e:	f7ff ff8d 	bl	8000e8c <terminalPrint>
	terminalPrintNL(2);
 8000f72:	2002      	movs	r0, #2
 8000f74:	f7ff ffb0 	bl	8000ed8 <terminalPrintNL>
	HAL_Delay(50);
 8000f78:	2032      	movs	r0, #50	; 0x32
 8000f7a:	f000 f901 	bl	8001180 <HAL_Delay>
	terminalPrint("Welcome, user.");
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <terminalPrintInit+0x94>)
 8000f80:	f7ff ff84 	bl	8000e8c <terminalPrint>

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	08002d2c 	.word	0x08002d2c
 8000f8c:	08002d54 	.word	0x08002d54
 8000f90:	08002d7c 	.word	0x08002d7c
 8000f94:	08002da4 	.word	0x08002da4
 8000f98:	08002dcc 	.word	0x08002dcc
 8000f9c:	08002df4 	.word	0x08002df4

08000fa0 <terminalPasswordLog>:

void terminalPasswordLog(int senha, int unlocked)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b090      	sub	sp, #64	; 0x40
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]

	char password[4];
	sprintf(password, "%d", senha);
 8000faa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	491b      	ldr	r1, [pc, #108]	; (8001020 <terminalPasswordLog+0x80>)
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 f98a 	bl	80022cc <siprintf>
	char message[] = "Attempt to unlock the door with the password: ";
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <terminalPasswordLog+0x84>)
 8000fba:	f107 040c 	add.w	r4, r7, #12
 8000fbe:	461d      	mov	r5, r3
 8000fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fcc:	c407      	stmia	r4!, {r0, r1, r2}
 8000fce:	8023      	strh	r3, [r4, #0]
 8000fd0:	3402      	adds	r4, #2
 8000fd2:	0c1b      	lsrs	r3, r3, #16
 8000fd4:	7023      	strb	r3, [r4, #0]
	strcat(message, password);
 8000fd6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 f993 	bl	800230c <strcat>
	// Mensagem caso usu√°rio tente entrar
	terminalPrintNL(2);
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f7ff ff76 	bl	8000ed8 <terminalPrintNL>
	terminalPrint(message);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff4b 	bl	8000e8c <terminalPrint>


	if (unlocked)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <terminalPasswordLog+0x6a>
	{
		terminalPrintNL(2);
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f7ff ff6b 	bl	8000ed8 <terminalPrintNL>
		terminalPrint("Access Allowed!");
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <terminalPasswordLog+0x88>)
 8001004:	f7ff ff42 	bl	8000e8c <terminalPrint>
	{
		terminalPrintNL(2);
		terminalPrint("Access Denied!");
	}

}
 8001008:	e005      	b.n	8001016 <terminalPasswordLog+0x76>
		terminalPrintNL(2);
 800100a:	2002      	movs	r0, #2
 800100c:	f7ff ff64 	bl	8000ed8 <terminalPrintNL>
		terminalPrint("Access Denied!");
 8001010:	4806      	ldr	r0, [pc, #24]	; (800102c <terminalPasswordLog+0x8c>)
 8001012:	f7ff ff3b 	bl	8000e8c <terminalPrint>
}
 8001016:	bf00      	nop
 8001018:	3740      	adds	r7, #64	; 0x40
 800101a:	46bd      	mov	sp, r7
 800101c:	bdb0      	pop	{r4, r5, r7, pc}
 800101e:	bf00      	nop
 8001020:	08002e04 	.word	0x08002e04
 8001024:	08002e28 	.word	0x08002e28
 8001028:	08002e08 	.word	0x08002e08
 800102c:	08002e18 	.word	0x08002e18

08001030 <terminalResetPassword>:

void terminalResetPassword () {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	terminalPrintNL(2);
 8001034:	2002      	movs	r0, #2
 8001036:	f7ff ff4f 	bl	8000ed8 <terminalPrintNL>
	terminalPrint("Password reset to factory default.");
 800103a:	4804      	ldr	r0, [pc, #16]	; (800104c <terminalResetPassword+0x1c>)
 800103c:	f7ff ff26 	bl	8000e8c <terminalPrint>
	terminalPrintNL(2);
 8001040:	2002      	movs	r0, #2
 8001042:	f7ff ff49 	bl	8000ed8 <terminalPrintNL>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	08002e58 	.word	0x08002e58

08001050 <terminalPasswordChanged>:

void terminalPasswordChanged () {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	terminalPrintNL(2);
 8001054:	2002      	movs	r0, #2
 8001056:	f7ff ff3f 	bl	8000ed8 <terminalPrintNL>
	terminalPrint("Request to change password.");
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <terminalPasswordChanged+0x1c>)
 800105c:	f7ff ff16 	bl	8000e8c <terminalPrint>
	terminalPrintNL(2);
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff ff39 	bl	8000ed8 <terminalPrintNL>
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	08002e7c 	.word	0x08002e7c

08001070 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001070:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001072:	e003      	b.n	800107c <LoopCopyDataInit>

08001074 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001076:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001078:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800107a:	3104      	adds	r1, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800107c:	480a      	ldr	r0, [pc, #40]	; (80010a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001080:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001082:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001084:	d3f6      	bcc.n	8001074 <CopyDataInit>
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001088:	e002      	b.n	8001090 <LoopFillZerobss>

0800108a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800108c:	f842 3b04 	str.w	r3, [r2], #4

08001090 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001092:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001094:	d3f9      	bcc.n	800108a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001096:	f7ff fef3 	bl	8000e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109a:	f001 f8eb 	bl	8002274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109e:	f7ff fba1 	bl	80007e4 <main>
  bx lr
 80010a2:	4770      	bx	lr
  ldr r3, =_sidata
 80010a4:	08002f00 	.word	0x08002f00
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010ac:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80010b0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80010b4:	200000e0 	.word	0x200000e0

080010b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_2_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_Init+0x28>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_Init+0x28>)
 80010c6:	f043 0310 	orr.w	r3, r3, #16
 80010ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 f929 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 f808 	bl	80010e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d8:	f7ff fde8 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40022000 	.word	0x40022000

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x54>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x58>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001102:	fbb2 f3f3 	udiv	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 f933 	bl	8001372 <HAL_SYSTICK_Config>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e00e      	b.n	8001134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d80a      	bhi.n	8001132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f000 f909 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001128:	4a06      	ldr	r2, [pc, #24]	; (8001144 <HAL_InitTick+0x5c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000000 	.word	0x20000000
 8001140:	20000008 	.word	0x20000008
 8001144:	20000004 	.word	0x20000004

08001148 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_IncTick+0x1c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <HAL_IncTick+0x20>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a03      	ldr	r2, [pc, #12]	; (8001168 <HAL_IncTick+0x20>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	20000008 	.word	0x20000008
 8001168:	200000d8 	.word	0x200000d8

0800116c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b02      	ldr	r3, [pc, #8]	; (800117c <HAL_GetTick+0x10>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	200000d8 	.word	0x200000d8

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff fff0 	bl	800116c <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_Delay+0x40>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffe0 	bl	800116c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000008 	.word	0x20000008

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	; (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff90 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff49 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff5e 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff90 	bl	800127c <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5f 	bl	8001228 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffb0 	bl	80012e0 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b08b      	sub	sp, #44	; 0x2c
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139e:	e121      	b.n	80015e4 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013a0:	2201      	movs	r2, #1
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	f040 8110 	bne.w	80015de <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d034      	beq.n	8001430 <HAL_GPIO_Init+0xa4>
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d80d      	bhi.n	80013e6 <HAL_GPIO_Init+0x5a>
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d02b      	beq.n	8001426 <HAL_GPIO_Init+0x9a>
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d804      	bhi.n	80013dc <HAL_GPIO_Init+0x50>
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d031      	beq.n	800143a <HAL_GPIO_Init+0xae>
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d01c      	beq.n	8001414 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013da:	e048      	b.n	800146e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d043      	beq.n	8001468 <HAL_GPIO_Init+0xdc>
 80013e0:	2b11      	cmp	r3, #17
 80013e2:	d01b      	beq.n	800141c <HAL_GPIO_Init+0x90>
          break;
 80013e4:	e043      	b.n	800146e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80013e6:	4a86      	ldr	r2, [pc, #536]	; (8001600 <HAL_GPIO_Init+0x274>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d026      	beq.n	800143a <HAL_GPIO_Init+0xae>
 80013ec:	4a84      	ldr	r2, [pc, #528]	; (8001600 <HAL_GPIO_Init+0x274>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d806      	bhi.n	8001400 <HAL_GPIO_Init+0x74>
 80013f2:	4a84      	ldr	r2, [pc, #528]	; (8001604 <HAL_GPIO_Init+0x278>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d020      	beq.n	800143a <HAL_GPIO_Init+0xae>
 80013f8:	4a83      	ldr	r2, [pc, #524]	; (8001608 <HAL_GPIO_Init+0x27c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d01d      	beq.n	800143a <HAL_GPIO_Init+0xae>
          break;
 80013fe:	e036      	b.n	800146e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001400:	4a82      	ldr	r2, [pc, #520]	; (800160c <HAL_GPIO_Init+0x280>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d019      	beq.n	800143a <HAL_GPIO_Init+0xae>
 8001406:	4a82      	ldr	r2, [pc, #520]	; (8001610 <HAL_GPIO_Init+0x284>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d016      	beq.n	800143a <HAL_GPIO_Init+0xae>
 800140c:	4a81      	ldr	r2, [pc, #516]	; (8001614 <HAL_GPIO_Init+0x288>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0xae>
          break;
 8001412:	e02c      	b.n	800146e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	623b      	str	r3, [r7, #32]
          break;
 800141a:	e028      	b.n	800146e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	3304      	adds	r3, #4
 8001422:	623b      	str	r3, [r7, #32]
          break;
 8001424:	e023      	b.n	800146e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	3308      	adds	r3, #8
 800142c:	623b      	str	r3, [r7, #32]
          break;
 800142e:	e01e      	b.n	800146e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	330c      	adds	r3, #12
 8001436:	623b      	str	r3, [r7, #32]
          break;
 8001438:	e019      	b.n	800146e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001442:	2304      	movs	r3, #4
 8001444:	623b      	str	r3, [r7, #32]
          break;
 8001446:	e012      	b.n	800146e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d105      	bne.n	800145c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001450:	2308      	movs	r3, #8
 8001452:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	611a      	str	r2, [r3, #16]
          break;
 800145a:	e008      	b.n	800146e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800145c:	2308      	movs	r3, #8
 800145e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	615a      	str	r2, [r3, #20]
          break;
 8001466:	e002      	b.n	800146e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
          break;
 800146c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2bff      	cmp	r3, #255	; 0xff
 8001472:	d801      	bhi.n	8001478 <HAL_GPIO_Init+0xec>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	e001      	b.n	800147c <HAL_GPIO_Init+0xf0>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3304      	adds	r3, #4
 800147c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2bff      	cmp	r3, #255	; 0xff
 8001482:	d802      	bhi.n	800148a <HAL_GPIO_Init+0xfe>
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	e002      	b.n	8001490 <HAL_GPIO_Init+0x104>
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	3b08      	subs	r3, #8
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	210f      	movs	r1, #15
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	401a      	ands	r2, r3
 80014a2:	6a39      	ldr	r1, [r7, #32]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	431a      	orrs	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 8090 	beq.w	80015de <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014be:	4b56      	ldr	r3, [pc, #344]	; (8001618 <HAL_GPIO_Init+0x28c>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a55      	ldr	r2, [pc, #340]	; (8001618 <HAL_GPIO_Init+0x28c>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6193      	str	r3, [r2, #24]
 80014ca:	4b53      	ldr	r3, [pc, #332]	; (8001618 <HAL_GPIO_Init+0x28c>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014d6:	4a51      	ldr	r2, [pc, #324]	; (800161c <HAL_GPIO_Init+0x290>)
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a48      	ldr	r2, [pc, #288]	; (8001620 <HAL_GPIO_Init+0x294>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x192>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a47      	ldr	r2, [pc, #284]	; (8001624 <HAL_GPIO_Init+0x298>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x18e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a46      	ldr	r2, [pc, #280]	; (8001628 <HAL_GPIO_Init+0x29c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x18a>
 8001512:	2302      	movs	r3, #2
 8001514:	e004      	b.n	8001520 <HAL_GPIO_Init+0x194>
 8001516:	2303      	movs	r3, #3
 8001518:	e002      	b.n	8001520 <HAL_GPIO_Init+0x194>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_GPIO_Init+0x194>
 800151e:	2300      	movs	r3, #0
 8001520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001522:	f002 0203 	and.w	r2, r2, #3
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	4093      	lsls	r3, r2
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001530:	493a      	ldr	r1, [pc, #232]	; (800161c <HAL_GPIO_Init+0x290>)
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d006      	beq.n	8001558 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <HAL_GPIO_Init+0x2a0>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4937      	ldr	r1, [pc, #220]	; (800162c <HAL_GPIO_Init+0x2a0>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]
 8001556:	e006      	b.n	8001566 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001558:	4b34      	ldr	r3, [pc, #208]	; (800162c <HAL_GPIO_Init+0x2a0>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	43db      	mvns	r3, r3
 8001560:	4932      	ldr	r1, [pc, #200]	; (800162c <HAL_GPIO_Init+0x2a0>)
 8001562:	4013      	ands	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001572:	4b2e      	ldr	r3, [pc, #184]	; (800162c <HAL_GPIO_Init+0x2a0>)
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	492d      	ldr	r1, [pc, #180]	; (800162c <HAL_GPIO_Init+0x2a0>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	604b      	str	r3, [r1, #4]
 800157e:	e006      	b.n	800158e <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_GPIO_Init+0x2a0>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	43db      	mvns	r3, r3
 8001588:	4928      	ldr	r1, [pc, #160]	; (800162c <HAL_GPIO_Init+0x2a0>)
 800158a:	4013      	ands	r3, r2
 800158c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d006      	beq.n	80015a8 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800159a:	4b24      	ldr	r3, [pc, #144]	; (800162c <HAL_GPIO_Init+0x2a0>)
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	4923      	ldr	r1, [pc, #140]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
 80015a6:	e006      	b.n	80015b6 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015a8:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	491e      	ldr	r1, [pc, #120]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	4919      	ldr	r1, [pc, #100]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60cb      	str	r3, [r1, #12]
 80015ce:	e006      	b.n	80015de <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	4914      	ldr	r1, [pc, #80]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80015da:	4013      	ands	r3, r2
 80015dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	3301      	adds	r3, #1
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	fa22 f303 	lsr.w	r3, r2, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f47f aed6 	bne.w	80013a0 <HAL_GPIO_Init+0x14>
  }
}
 80015f4:	bf00      	nop
 80015f6:	372c      	adds	r7, #44	; 0x2c
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	10210000 	.word	0x10210000
 8001604:	10110000 	.word	0x10110000
 8001608:	10120000 	.word	0x10120000
 800160c:	10310000 	.word	0x10310000
 8001610:	10320000 	.word	0x10320000
 8001614:	10220000 	.word	0x10220000
 8001618:	40021000 	.word	0x40021000
 800161c:	40010000 	.word	0x40010000
 8001620:	40010800 	.word	0x40010800
 8001624:	40010c00 	.word	0x40010c00
 8001628:	40011000 	.word	0x40011000
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	4013      	ands	r3, r2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	e001      	b.n	8001652 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	807b      	strh	r3, [r7, #2]
 800166a:	4613      	mov	r3, r2
 800166c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800166e:	787b      	ldrb	r3, [r7, #1]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001674:	887a      	ldrh	r2, [r7, #2]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800167a:	e003      	b.n	8001684 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	041a      	lsls	r2, r3, #16
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	611a      	str	r2, [r3, #16]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016a0:	887a      	ldrh	r2, [r7, #2]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4013      	ands	r3, r2
 80016a6:	041a      	lsls	r2, r3, #16
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	400b      	ands	r3, r1
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	611a      	str	r2, [r3, #16]
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e26c      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8087 	beq.w	80017ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e0:	4b92      	ldr	r3, [pc, #584]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d00c      	beq.n	8001706 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ec:	4b8f      	ldr	r3, [pc, #572]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d112      	bne.n	800171e <HAL_RCC_OscConfig+0x5e>
 80016f8:	4b8c      	ldr	r3, [pc, #560]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d10b      	bne.n	800171e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001706:	4b89      	ldr	r3, [pc, #548]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d06c      	beq.n	80017ec <HAL_RCC_OscConfig+0x12c>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d168      	bne.n	80017ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e246      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x76>
 8001728:	4b80      	ldr	r3, [pc, #512]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a7f      	ldr	r2, [pc, #508]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800172e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	e02e      	b.n	8001794 <HAL_RCC_OscConfig+0xd4>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x98>
 800173e:	4b7b      	ldr	r3, [pc, #492]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a7a      	ldr	r2, [pc, #488]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b78      	ldr	r3, [pc, #480]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a77      	ldr	r2, [pc, #476]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e01d      	b.n	8001794 <HAL_RCC_OscConfig+0xd4>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0xbc>
 8001762:	4b72      	ldr	r3, [pc, #456]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a71      	ldr	r2, [pc, #452]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b6f      	ldr	r3, [pc, #444]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a6e      	ldr	r2, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0xd4>
 800177c:	4b6b      	ldr	r3, [pc, #428]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a6a      	ldr	r2, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a67      	ldr	r2, [pc, #412]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800178e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001792:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fce6 	bl	800116c <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fce2 	bl	800116c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1fa      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b5d      	ldr	r3, [pc, #372]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe4>
 80017c2:	e014      	b.n	80017ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fcd2 	bl	800116c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fcce 	bl	800116c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e1e6      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017de:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x10c>
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d063      	beq.n	80018c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017fa:	4b4c      	ldr	r3, [pc, #304]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001806:	4b49      	ldr	r3, [pc, #292]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b08      	cmp	r3, #8
 8001810:	d11c      	bne.n	800184c <HAL_RCC_OscConfig+0x18c>
 8001812:	4b46      	ldr	r3, [pc, #280]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d116      	bne.n	800184c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181e:	4b43      	ldr	r3, [pc, #268]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_RCC_OscConfig+0x176>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e1ba      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4939      	ldr	r1, [pc, #228]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	e03a      	b.n	80018c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d020      	beq.n	8001896 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff fc87 	bl	800116c <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001862:	f7ff fc83 	bl	800116c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e19b      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4927      	ldr	r1, [pc, #156]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
 8001894:	e015      	b.n	80018c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fc66 	bl	800116c <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff fc62 	bl	800116c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e17a      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d03a      	beq.n	8001944 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d019      	beq.n	800190a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_RCC_OscConfig+0x274>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7ff fc46 	bl	800116c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e4:	f7ff fc42 	bl	800116c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e15a      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001902:	2001      	movs	r0, #1
 8001904:	f000 fada 	bl	8001ebc <RCC_Delay>
 8001908:	e01c      	b.n	8001944 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_RCC_OscConfig+0x274>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001910:	f7ff fc2c 	bl	800116c <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001916:	e00f      	b.n	8001938 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff fc28 	bl	800116c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d908      	bls.n	8001938 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e140      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	42420000 	.word	0x42420000
 8001934:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	4b9e      	ldr	r3, [pc, #632]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1e9      	bne.n	8001918 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80a6 	beq.w	8001a9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001956:	4b97      	ldr	r3, [pc, #604]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10d      	bne.n	800197e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b94      	ldr	r3, [pc, #592]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a93      	ldr	r2, [pc, #588]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b91      	ldr	r3, [pc, #580]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800197a:	2301      	movs	r3, #1
 800197c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197e:	4b8e      	ldr	r3, [pc, #568]	; (8001bb8 <HAL_RCC_OscConfig+0x4f8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d118      	bne.n	80019bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800198a:	4b8b      	ldr	r3, [pc, #556]	; (8001bb8 <HAL_RCC_OscConfig+0x4f8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a8a      	ldr	r2, [pc, #552]	; (8001bb8 <HAL_RCC_OscConfig+0x4f8>)
 8001990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001996:	f7ff fbe9 	bl	800116c <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199e:	f7ff fbe5 	bl	800116c <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b64      	cmp	r3, #100	; 0x64
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0fd      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <HAL_RCC_OscConfig+0x4f8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x312>
 80019c4:	4b7b      	ldr	r3, [pc, #492]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4a7a      	ldr	r2, [pc, #488]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6213      	str	r3, [r2, #32]
 80019d0:	e02d      	b.n	8001a2e <HAL_RCC_OscConfig+0x36e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x334>
 80019da:	4b76      	ldr	r3, [pc, #472]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a75      	ldr	r2, [pc, #468]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a72      	ldr	r2, [pc, #456]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6213      	str	r3, [r2, #32]
 80019f2:	e01c      	b.n	8001a2e <HAL_RCC_OscConfig+0x36e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d10c      	bne.n	8001a16 <HAL_RCC_OscConfig+0x356>
 80019fc:	4b6d      	ldr	r3, [pc, #436]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4a6c      	ldr	r2, [pc, #432]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a69      	ldr	r2, [pc, #420]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6213      	str	r3, [r2, #32]
 8001a14:	e00b      	b.n	8001a2e <HAL_RCC_OscConfig+0x36e>
 8001a16:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a66      	ldr	r2, [pc, #408]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6213      	str	r3, [r2, #32]
 8001a22:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a63      	ldr	r2, [pc, #396]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d015      	beq.n	8001a62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fb99 	bl	800116c <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff fb95 	bl	800116c <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0ab      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	4b57      	ldr	r3, [pc, #348]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ee      	beq.n	8001a3e <HAL_RCC_OscConfig+0x37e>
 8001a60:	e014      	b.n	8001a8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff fb83 	bl	800116c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff fb7f 	bl	800116c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e095      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ee      	bne.n	8001a6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d105      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a92:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a47      	ldr	r2, [pc, #284]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8081 	beq.w	8001baa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa8:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d061      	beq.n	8001b78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d146      	bne.n	8001b4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b3f      	ldr	r3, [pc, #252]	; (8001bbc <HAL_RCC_OscConfig+0x4fc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fb53 	bl	800116c <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff fb4f 	bl	800116c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e067      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001adc:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af0:	d108      	bne.n	8001b04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001af2:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	492d      	ldr	r1, [pc, #180]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b04:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a19      	ldr	r1, [r3, #32]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	430b      	orrs	r3, r1
 8001b16:	4927      	ldr	r1, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x4fc>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff fb23 	bl	800116c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff fb1f 	bl	800116c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e037      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x46a>
 8001b48:	e02f      	b.n	8001baa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <HAL_RCC_OscConfig+0x4fc>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff fb0c 	bl	800116c <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff fb08 	bl	800116c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e020      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x498>
 8001b76:	e018      	b.n	8001baa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e013      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	42420060 	.word	0x42420060

08001bc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0d0      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b6a      	ldr	r3, [pc, #424]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d910      	bls.n	8001c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0207 	bic.w	r2, r3, #7
 8001bea:	4965      	ldr	r1, [pc, #404]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0b8      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d020      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c1c:	4b59      	ldr	r3, [pc, #356]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c34:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c40:	4b50      	ldr	r3, [pc, #320]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	494d      	ldr	r1, [pc, #308]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d040      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d115      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e07f      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d109      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e073      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e06b      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9e:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f023 0203 	bic.w	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4936      	ldr	r1, [pc, #216]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff fa5c 	bl	800116c <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7ff fa58 	bl	800116c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e053      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 020c 	and.w	r2, r3, #12
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1eb      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d210      	bcs.n	8001d10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 0207 	bic.w	r2, r3, #7
 8001cf6:	4922      	ldr	r1, [pc, #136]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_RCC_ClockConfig+0x1c0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e032      	b.n	8001d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4916      	ldr	r1, [pc, #88]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d009      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	490e      	ldr	r1, [pc, #56]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d4e:	f000 f821 	bl	8001d94 <HAL_RCC_GetSysClockFreq>
 8001d52:	4601      	mov	r1, r0
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	; (8001d88 <HAL_RCC_ClockConfig+0x1c8>)
 8001d60:	5cd3      	ldrb	r3, [r2, r3]
 8001d62:	fa21 f303 	lsr.w	r3, r1, r3
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <HAL_RCC_ClockConfig+0x1cc>)
 8001d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_ClockConfig+0x1d0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f9ba 	bl	80010e8 <HAL_InitTick>

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40021000 	.word	0x40021000
 8001d88:	08002eac 	.word	0x08002eac
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000004 	.word	0x20000004

08001d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d94:	b490      	push	{r4, r7}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d9c:	1d3c      	adds	r4, r7, #4
 8001d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001da4:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d002      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d003      	beq.n	8001dda <HAL_RCC_GetSysClockFreq+0x46>
 8001dd2:	e02d      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dd6:	623b      	str	r3, [r7, #32]
      break;
 8001dd8:	e02d      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	0c9b      	lsrs	r3, r3, #18
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001de6:	4413      	add	r3, r2
 8001de8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001dec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	0c5b      	lsrs	r3, r3, #17
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e06:	4413      	add	r3, r2
 8001e08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	4a0f      	ldr	r2, [pc, #60]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e12:	fb02 f203 	mul.w	r2, r2, r3
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1e:	e004      	b.n	8001e2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e24:	fb02 f303 	mul.w	r3, r2, r3
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	623b      	str	r3, [r7, #32]
      break;
 8001e2e:	e002      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e32:	623b      	str	r3, [r7, #32]
      break;
 8001e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e36:	6a3b      	ldr	r3, [r7, #32]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3728      	adds	r7, #40	; 0x28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc90      	pop	{r4, r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	08002e98 	.word	0x08002e98
 8001e48:	08002ea8 	.word	0x08002ea8
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	007a1200 	.word	0x007a1200
 8001e54:	003d0900 	.word	0x003d0900

08001e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b02      	ldr	r3, [pc, #8]	; (8001e68 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	20000000 	.word	0x20000000

08001e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e70:	f7ff fff2 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e74:	4601      	mov	r1, r0
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	0a1b      	lsrs	r3, r3, #8
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	4a03      	ldr	r2, [pc, #12]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e82:	5cd3      	ldrb	r3, [r2, r3]
 8001e84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	08002ebc 	.word	0x08002ebc

08001e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e98:	f7ff ffde 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	0adb      	lsrs	r3, r3, #11
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4a03      	ldr	r2, [pc, #12]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	08002ebc 	.word	0x08002ebc

08001ebc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <RCC_Delay+0x34>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <RCC_Delay+0x38>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0a5b      	lsrs	r3, r3, #9
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ed8:	bf00      	nop
  }
  while (Delay --);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1e5a      	subs	r2, r3, #1
 8001ede:	60fa      	str	r2, [r7, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f9      	bne.n	8001ed8 <RCC_Delay+0x1c>
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	10624dd3 	.word	0x10624dd3

08001ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e03f      	b.n	8001f8a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fef6 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2224      	movs	r2, #36	; 0x24
 8001f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f905 	bl	800214c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b08a      	sub	sp, #40	; 0x28
 8001f96:	af02      	add	r7, sp, #8
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d17c      	bne.n	80020ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_UART_Transmit+0x2c>
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e075      	b.n	80020ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_UART_Transmit+0x3e>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e06e      	b.n	80020ae <HAL_UART_Transmit+0x11c>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2221      	movs	r2, #33	; 0x21
 8001fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fe6:	f7ff f8c1 	bl	800116c <HAL_GetTick>
 8001fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	88fa      	ldrh	r2, [r7, #6]
 8001ff0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002000:	d108      	bne.n	8002014 <HAL_UART_Transmit+0x82>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d104      	bne.n	8002014 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	e003      	b.n	800201c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002024:	e02a      	b.n	800207c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2200      	movs	r2, #0
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f840 	bl	80020b6 <UART_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e036      	b.n	80020ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10b      	bne.n	800205e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	3302      	adds	r3, #2
 800205a:	61bb      	str	r3, [r7, #24]
 800205c:	e007      	b.n	800206e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	781a      	ldrb	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3301      	adds	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1cf      	bne.n	8002026 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	2140      	movs	r1, #64	; 0x40
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f810 	bl	80020b6 <UART_WaitOnFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e006      	b.n	80020ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e000      	b.n	80020ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	4613      	mov	r3, r2
 80020c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020c6:	e02c      	b.n	8002122 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ce:	d028      	beq.n	8002122 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80020d6:	f7ff f849 	bl	800116c <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d21d      	bcs.n	8002122 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0201 	bic.w	r2, r2, #1
 8002104:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e00f      	b.n	8002142 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4013      	ands	r3, r2
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	429a      	cmp	r2, r3
 8002130:	bf0c      	ite	eq
 8002132:	2301      	moveq	r3, #1
 8002134:	2300      	movne	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	429a      	cmp	r2, r3
 800213e:	d0c3      	beq.n	80020c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	4313      	orrs	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002186:	f023 030c 	bic.w	r3, r3, #12
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	430b      	orrs	r3, r1
 8002192:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2c      	ldr	r2, [pc, #176]	; (8002260 <UART_SetConfig+0x114>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d103      	bne.n	80021bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021b4:	f7ff fe6e 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	e002      	b.n	80021c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021bc:	f7ff fe56 	bl	8001e6c <HAL_RCC_GetPCLK1Freq>
 80021c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	009a      	lsls	r2, r3, #2
 80021cc:	441a      	add	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <UART_SetConfig+0x118>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	0119      	lsls	r1, r3, #4
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	009a      	lsls	r2, r3, #2
 80021ec:	441a      	add	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <UART_SetConfig+0x118>)
 80021fa:	fba3 0302 	umull	r0, r3, r3, r2
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2064      	movs	r0, #100	; 0x64
 8002202:	fb00 f303 	mul.w	r3, r0, r3
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	3332      	adds	r3, #50	; 0x32
 800220c:	4a15      	ldr	r2, [pc, #84]	; (8002264 <UART_SetConfig+0x118>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002218:	4419      	add	r1, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	009a      	lsls	r2, r3, #2
 8002224:	441a      	add	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <UART_SetConfig+0x118>)
 8002232:	fba3 0302 	umull	r0, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2064      	movs	r0, #100	; 0x64
 800223a:	fb00 f303 	mul.w	r3, r0, r3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	3332      	adds	r3, #50	; 0x32
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <UART_SetConfig+0x118>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	f003 020f 	and.w	r2, r3, #15
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	440a      	add	r2, r1
 8002256:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40013800 	.word	0x40013800
 8002264:	51eb851f 	.word	0x51eb851f

08002268 <__errno>:
 8002268:	4b01      	ldr	r3, [pc, #4]	; (8002270 <__errno+0x8>)
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	2000000c 	.word	0x2000000c

08002274 <__libc_init_array>:
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	2500      	movs	r5, #0
 8002278:	4e0c      	ldr	r6, [pc, #48]	; (80022ac <__libc_init_array+0x38>)
 800227a:	4c0d      	ldr	r4, [pc, #52]	; (80022b0 <__libc_init_array+0x3c>)
 800227c:	1ba4      	subs	r4, r4, r6
 800227e:	10a4      	asrs	r4, r4, #2
 8002280:	42a5      	cmp	r5, r4
 8002282:	d109      	bne.n	8002298 <__libc_init_array+0x24>
 8002284:	f000 fc44 	bl	8002b10 <_init>
 8002288:	2500      	movs	r5, #0
 800228a:	4e0a      	ldr	r6, [pc, #40]	; (80022b4 <__libc_init_array+0x40>)
 800228c:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <__libc_init_array+0x44>)
 800228e:	1ba4      	subs	r4, r4, r6
 8002290:	10a4      	asrs	r4, r4, #2
 8002292:	42a5      	cmp	r5, r4
 8002294:	d105      	bne.n	80022a2 <__libc_init_array+0x2e>
 8002296:	bd70      	pop	{r4, r5, r6, pc}
 8002298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800229c:	4798      	blx	r3
 800229e:	3501      	adds	r5, #1
 80022a0:	e7ee      	b.n	8002280 <__libc_init_array+0xc>
 80022a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022a6:	4798      	blx	r3
 80022a8:	3501      	adds	r5, #1
 80022aa:	e7f2      	b.n	8002292 <__libc_init_array+0x1e>
 80022ac:	08002ef8 	.word	0x08002ef8
 80022b0:	08002ef8 	.word	0x08002ef8
 80022b4:	08002ef8 	.word	0x08002ef8
 80022b8:	08002efc 	.word	0x08002efc

080022bc <memset>:
 80022bc:	4603      	mov	r3, r0
 80022be:	4402      	add	r2, r0
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d100      	bne.n	80022c6 <memset+0xa>
 80022c4:	4770      	bx	lr
 80022c6:	f803 1b01 	strb.w	r1, [r3], #1
 80022ca:	e7f9      	b.n	80022c0 <memset+0x4>

080022cc <siprintf>:
 80022cc:	b40e      	push	{r1, r2, r3}
 80022ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80022d2:	b500      	push	{lr}
 80022d4:	b09c      	sub	sp, #112	; 0x70
 80022d6:	ab1d      	add	r3, sp, #116	; 0x74
 80022d8:	9002      	str	r0, [sp, #8]
 80022da:	9006      	str	r0, [sp, #24]
 80022dc:	9107      	str	r1, [sp, #28]
 80022de:	9104      	str	r1, [sp, #16]
 80022e0:	4808      	ldr	r0, [pc, #32]	; (8002304 <siprintf+0x38>)
 80022e2:	4909      	ldr	r1, [pc, #36]	; (8002308 <siprintf+0x3c>)
 80022e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80022e8:	9105      	str	r1, [sp, #20]
 80022ea:	6800      	ldr	r0, [r0, #0]
 80022ec:	a902      	add	r1, sp, #8
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	f000 f876 	bl	80023e0 <_svfiprintf_r>
 80022f4:	2200      	movs	r2, #0
 80022f6:	9b02      	ldr	r3, [sp, #8]
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	b01c      	add	sp, #112	; 0x70
 80022fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002300:	b003      	add	sp, #12
 8002302:	4770      	bx	lr
 8002304:	2000000c 	.word	0x2000000c
 8002308:	ffff0208 	.word	0xffff0208

0800230c <strcat>:
 800230c:	4603      	mov	r3, r0
 800230e:	b510      	push	{r4, lr}
 8002310:	781a      	ldrb	r2, [r3, #0]
 8002312:	1c5c      	adds	r4, r3, #1
 8002314:	b93a      	cbnz	r2, 8002326 <strcat+0x1a>
 8002316:	3b01      	subs	r3, #1
 8002318:	f811 2b01 	ldrb.w	r2, [r1], #1
 800231c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002320:	2a00      	cmp	r2, #0
 8002322:	d1f9      	bne.n	8002318 <strcat+0xc>
 8002324:	bd10      	pop	{r4, pc}
 8002326:	4623      	mov	r3, r4
 8002328:	e7f2      	b.n	8002310 <strcat+0x4>

0800232a <__ssputs_r>:
 800232a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800232e:	688e      	ldr	r6, [r1, #8]
 8002330:	4682      	mov	sl, r0
 8002332:	429e      	cmp	r6, r3
 8002334:	460c      	mov	r4, r1
 8002336:	4690      	mov	r8, r2
 8002338:	4699      	mov	r9, r3
 800233a:	d837      	bhi.n	80023ac <__ssputs_r+0x82>
 800233c:	898a      	ldrh	r2, [r1, #12]
 800233e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002342:	d031      	beq.n	80023a8 <__ssputs_r+0x7e>
 8002344:	2302      	movs	r3, #2
 8002346:	6825      	ldr	r5, [r4, #0]
 8002348:	6909      	ldr	r1, [r1, #16]
 800234a:	1a6f      	subs	r7, r5, r1
 800234c:	6965      	ldr	r5, [r4, #20]
 800234e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002352:	fb95 f5f3 	sdiv	r5, r5, r3
 8002356:	f109 0301 	add.w	r3, r9, #1
 800235a:	443b      	add	r3, r7
 800235c:	429d      	cmp	r5, r3
 800235e:	bf38      	it	cc
 8002360:	461d      	movcc	r5, r3
 8002362:	0553      	lsls	r3, r2, #21
 8002364:	d530      	bpl.n	80023c8 <__ssputs_r+0x9e>
 8002366:	4629      	mov	r1, r5
 8002368:	f000 fb38 	bl	80029dc <_malloc_r>
 800236c:	4606      	mov	r6, r0
 800236e:	b950      	cbnz	r0, 8002386 <__ssputs_r+0x5c>
 8002370:	230c      	movs	r3, #12
 8002372:	f04f 30ff 	mov.w	r0, #4294967295
 8002376:	f8ca 3000 	str.w	r3, [sl]
 800237a:	89a3      	ldrh	r3, [r4, #12]
 800237c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002380:	81a3      	strh	r3, [r4, #12]
 8002382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002386:	463a      	mov	r2, r7
 8002388:	6921      	ldr	r1, [r4, #16]
 800238a:	f000 fab7 	bl	80028fc <memcpy>
 800238e:	89a3      	ldrh	r3, [r4, #12]
 8002390:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002398:	81a3      	strh	r3, [r4, #12]
 800239a:	6126      	str	r6, [r4, #16]
 800239c:	443e      	add	r6, r7
 800239e:	6026      	str	r6, [r4, #0]
 80023a0:	464e      	mov	r6, r9
 80023a2:	6165      	str	r5, [r4, #20]
 80023a4:	1bed      	subs	r5, r5, r7
 80023a6:	60a5      	str	r5, [r4, #8]
 80023a8:	454e      	cmp	r6, r9
 80023aa:	d900      	bls.n	80023ae <__ssputs_r+0x84>
 80023ac:	464e      	mov	r6, r9
 80023ae:	4632      	mov	r2, r6
 80023b0:	4641      	mov	r1, r8
 80023b2:	6820      	ldr	r0, [r4, #0]
 80023b4:	f000 faad 	bl	8002912 <memmove>
 80023b8:	68a3      	ldr	r3, [r4, #8]
 80023ba:	2000      	movs	r0, #0
 80023bc:	1b9b      	subs	r3, r3, r6
 80023be:	60a3      	str	r3, [r4, #8]
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	441e      	add	r6, r3
 80023c4:	6026      	str	r6, [r4, #0]
 80023c6:	e7dc      	b.n	8002382 <__ssputs_r+0x58>
 80023c8:	462a      	mov	r2, r5
 80023ca:	f000 fb61 	bl	8002a90 <_realloc_r>
 80023ce:	4606      	mov	r6, r0
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d1e2      	bne.n	800239a <__ssputs_r+0x70>
 80023d4:	6921      	ldr	r1, [r4, #16]
 80023d6:	4650      	mov	r0, sl
 80023d8:	f000 fab4 	bl	8002944 <_free_r>
 80023dc:	e7c8      	b.n	8002370 <__ssputs_r+0x46>
	...

080023e0 <_svfiprintf_r>:
 80023e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023e4:	461d      	mov	r5, r3
 80023e6:	898b      	ldrh	r3, [r1, #12]
 80023e8:	b09d      	sub	sp, #116	; 0x74
 80023ea:	061f      	lsls	r7, r3, #24
 80023ec:	4680      	mov	r8, r0
 80023ee:	460c      	mov	r4, r1
 80023f0:	4616      	mov	r6, r2
 80023f2:	d50f      	bpl.n	8002414 <_svfiprintf_r+0x34>
 80023f4:	690b      	ldr	r3, [r1, #16]
 80023f6:	b96b      	cbnz	r3, 8002414 <_svfiprintf_r+0x34>
 80023f8:	2140      	movs	r1, #64	; 0x40
 80023fa:	f000 faef 	bl	80029dc <_malloc_r>
 80023fe:	6020      	str	r0, [r4, #0]
 8002400:	6120      	str	r0, [r4, #16]
 8002402:	b928      	cbnz	r0, 8002410 <_svfiprintf_r+0x30>
 8002404:	230c      	movs	r3, #12
 8002406:	f8c8 3000 	str.w	r3, [r8]
 800240a:	f04f 30ff 	mov.w	r0, #4294967295
 800240e:	e0c8      	b.n	80025a2 <_svfiprintf_r+0x1c2>
 8002410:	2340      	movs	r3, #64	; 0x40
 8002412:	6163      	str	r3, [r4, #20]
 8002414:	2300      	movs	r3, #0
 8002416:	9309      	str	r3, [sp, #36]	; 0x24
 8002418:	2320      	movs	r3, #32
 800241a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800241e:	2330      	movs	r3, #48	; 0x30
 8002420:	f04f 0b01 	mov.w	fp, #1
 8002424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002428:	9503      	str	r5, [sp, #12]
 800242a:	4637      	mov	r7, r6
 800242c:	463d      	mov	r5, r7
 800242e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002432:	b10b      	cbz	r3, 8002438 <_svfiprintf_r+0x58>
 8002434:	2b25      	cmp	r3, #37	; 0x25
 8002436:	d13e      	bne.n	80024b6 <_svfiprintf_r+0xd6>
 8002438:	ebb7 0a06 	subs.w	sl, r7, r6
 800243c:	d00b      	beq.n	8002456 <_svfiprintf_r+0x76>
 800243e:	4653      	mov	r3, sl
 8002440:	4632      	mov	r2, r6
 8002442:	4621      	mov	r1, r4
 8002444:	4640      	mov	r0, r8
 8002446:	f7ff ff70 	bl	800232a <__ssputs_r>
 800244a:	3001      	adds	r0, #1
 800244c:	f000 80a4 	beq.w	8002598 <_svfiprintf_r+0x1b8>
 8002450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002452:	4453      	add	r3, sl
 8002454:	9309      	str	r3, [sp, #36]	; 0x24
 8002456:	783b      	ldrb	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 809d 	beq.w	8002598 <_svfiprintf_r+0x1b8>
 800245e:	2300      	movs	r3, #0
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002468:	9304      	str	r3, [sp, #16]
 800246a:	9307      	str	r3, [sp, #28]
 800246c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002470:	931a      	str	r3, [sp, #104]	; 0x68
 8002472:	462f      	mov	r7, r5
 8002474:	2205      	movs	r2, #5
 8002476:	f817 1b01 	ldrb.w	r1, [r7], #1
 800247a:	4850      	ldr	r0, [pc, #320]	; (80025bc <_svfiprintf_r+0x1dc>)
 800247c:	f000 fa30 	bl	80028e0 <memchr>
 8002480:	9b04      	ldr	r3, [sp, #16]
 8002482:	b9d0      	cbnz	r0, 80024ba <_svfiprintf_r+0xda>
 8002484:	06d9      	lsls	r1, r3, #27
 8002486:	bf44      	itt	mi
 8002488:	2220      	movmi	r2, #32
 800248a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800248e:	071a      	lsls	r2, r3, #28
 8002490:	bf44      	itt	mi
 8002492:	222b      	movmi	r2, #43	; 0x2b
 8002494:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002498:	782a      	ldrb	r2, [r5, #0]
 800249a:	2a2a      	cmp	r2, #42	; 0x2a
 800249c:	d015      	beq.n	80024ca <_svfiprintf_r+0xea>
 800249e:	462f      	mov	r7, r5
 80024a0:	2000      	movs	r0, #0
 80024a2:	250a      	movs	r5, #10
 80024a4:	9a07      	ldr	r2, [sp, #28]
 80024a6:	4639      	mov	r1, r7
 80024a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024ac:	3b30      	subs	r3, #48	; 0x30
 80024ae:	2b09      	cmp	r3, #9
 80024b0:	d94d      	bls.n	800254e <_svfiprintf_r+0x16e>
 80024b2:	b1b8      	cbz	r0, 80024e4 <_svfiprintf_r+0x104>
 80024b4:	e00f      	b.n	80024d6 <_svfiprintf_r+0xf6>
 80024b6:	462f      	mov	r7, r5
 80024b8:	e7b8      	b.n	800242c <_svfiprintf_r+0x4c>
 80024ba:	4a40      	ldr	r2, [pc, #256]	; (80025bc <_svfiprintf_r+0x1dc>)
 80024bc:	463d      	mov	r5, r7
 80024be:	1a80      	subs	r0, r0, r2
 80024c0:	fa0b f000 	lsl.w	r0, fp, r0
 80024c4:	4318      	orrs	r0, r3
 80024c6:	9004      	str	r0, [sp, #16]
 80024c8:	e7d3      	b.n	8002472 <_svfiprintf_r+0x92>
 80024ca:	9a03      	ldr	r2, [sp, #12]
 80024cc:	1d11      	adds	r1, r2, #4
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	9103      	str	r1, [sp, #12]
 80024d2:	2a00      	cmp	r2, #0
 80024d4:	db01      	blt.n	80024da <_svfiprintf_r+0xfa>
 80024d6:	9207      	str	r2, [sp, #28]
 80024d8:	e004      	b.n	80024e4 <_svfiprintf_r+0x104>
 80024da:	4252      	negs	r2, r2
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	9207      	str	r2, [sp, #28]
 80024e2:	9304      	str	r3, [sp, #16]
 80024e4:	783b      	ldrb	r3, [r7, #0]
 80024e6:	2b2e      	cmp	r3, #46	; 0x2e
 80024e8:	d10c      	bne.n	8002504 <_svfiprintf_r+0x124>
 80024ea:	787b      	ldrb	r3, [r7, #1]
 80024ec:	2b2a      	cmp	r3, #42	; 0x2a
 80024ee:	d133      	bne.n	8002558 <_svfiprintf_r+0x178>
 80024f0:	9b03      	ldr	r3, [sp, #12]
 80024f2:	3702      	adds	r7, #2
 80024f4:	1d1a      	adds	r2, r3, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	9203      	str	r2, [sp, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bfb8      	it	lt
 80024fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8002502:	9305      	str	r3, [sp, #20]
 8002504:	4d2e      	ldr	r5, [pc, #184]	; (80025c0 <_svfiprintf_r+0x1e0>)
 8002506:	2203      	movs	r2, #3
 8002508:	7839      	ldrb	r1, [r7, #0]
 800250a:	4628      	mov	r0, r5
 800250c:	f000 f9e8 	bl	80028e0 <memchr>
 8002510:	b138      	cbz	r0, 8002522 <_svfiprintf_r+0x142>
 8002512:	2340      	movs	r3, #64	; 0x40
 8002514:	1b40      	subs	r0, r0, r5
 8002516:	fa03 f000 	lsl.w	r0, r3, r0
 800251a:	9b04      	ldr	r3, [sp, #16]
 800251c:	3701      	adds	r7, #1
 800251e:	4303      	orrs	r3, r0
 8002520:	9304      	str	r3, [sp, #16]
 8002522:	7839      	ldrb	r1, [r7, #0]
 8002524:	2206      	movs	r2, #6
 8002526:	4827      	ldr	r0, [pc, #156]	; (80025c4 <_svfiprintf_r+0x1e4>)
 8002528:	1c7e      	adds	r6, r7, #1
 800252a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800252e:	f000 f9d7 	bl	80028e0 <memchr>
 8002532:	2800      	cmp	r0, #0
 8002534:	d038      	beq.n	80025a8 <_svfiprintf_r+0x1c8>
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <_svfiprintf_r+0x1e8>)
 8002538:	bb13      	cbnz	r3, 8002580 <_svfiprintf_r+0x1a0>
 800253a:	9b03      	ldr	r3, [sp, #12]
 800253c:	3307      	adds	r3, #7
 800253e:	f023 0307 	bic.w	r3, r3, #7
 8002542:	3308      	adds	r3, #8
 8002544:	9303      	str	r3, [sp, #12]
 8002546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002548:	444b      	add	r3, r9
 800254a:	9309      	str	r3, [sp, #36]	; 0x24
 800254c:	e76d      	b.n	800242a <_svfiprintf_r+0x4a>
 800254e:	fb05 3202 	mla	r2, r5, r2, r3
 8002552:	2001      	movs	r0, #1
 8002554:	460f      	mov	r7, r1
 8002556:	e7a6      	b.n	80024a6 <_svfiprintf_r+0xc6>
 8002558:	2300      	movs	r3, #0
 800255a:	250a      	movs	r5, #10
 800255c:	4619      	mov	r1, r3
 800255e:	3701      	adds	r7, #1
 8002560:	9305      	str	r3, [sp, #20]
 8002562:	4638      	mov	r0, r7
 8002564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002568:	3a30      	subs	r2, #48	; 0x30
 800256a:	2a09      	cmp	r2, #9
 800256c:	d903      	bls.n	8002576 <_svfiprintf_r+0x196>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0c8      	beq.n	8002504 <_svfiprintf_r+0x124>
 8002572:	9105      	str	r1, [sp, #20]
 8002574:	e7c6      	b.n	8002504 <_svfiprintf_r+0x124>
 8002576:	fb05 2101 	mla	r1, r5, r1, r2
 800257a:	2301      	movs	r3, #1
 800257c:	4607      	mov	r7, r0
 800257e:	e7f0      	b.n	8002562 <_svfiprintf_r+0x182>
 8002580:	ab03      	add	r3, sp, #12
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	4622      	mov	r2, r4
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <_svfiprintf_r+0x1ec>)
 8002588:	a904      	add	r1, sp, #16
 800258a:	4640      	mov	r0, r8
 800258c:	f3af 8000 	nop.w
 8002590:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002594:	4681      	mov	r9, r0
 8002596:	d1d6      	bne.n	8002546 <_svfiprintf_r+0x166>
 8002598:	89a3      	ldrh	r3, [r4, #12]
 800259a:	065b      	lsls	r3, r3, #25
 800259c:	f53f af35 	bmi.w	800240a <_svfiprintf_r+0x2a>
 80025a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025a2:	b01d      	add	sp, #116	; 0x74
 80025a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025a8:	ab03      	add	r3, sp, #12
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	4622      	mov	r2, r4
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <_svfiprintf_r+0x1ec>)
 80025b0:	a904      	add	r1, sp, #16
 80025b2:	4640      	mov	r0, r8
 80025b4:	f000 f882 	bl	80026bc <_printf_i>
 80025b8:	e7ea      	b.n	8002590 <_svfiprintf_r+0x1b0>
 80025ba:	bf00      	nop
 80025bc:	08002ec4 	.word	0x08002ec4
 80025c0:	08002eca 	.word	0x08002eca
 80025c4:	08002ece 	.word	0x08002ece
 80025c8:	00000000 	.word	0x00000000
 80025cc:	0800232b 	.word	0x0800232b

080025d0 <_printf_common>:
 80025d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025d4:	4691      	mov	r9, r2
 80025d6:	461f      	mov	r7, r3
 80025d8:	688a      	ldr	r2, [r1, #8]
 80025da:	690b      	ldr	r3, [r1, #16]
 80025dc:	4606      	mov	r6, r0
 80025de:	4293      	cmp	r3, r2
 80025e0:	bfb8      	it	lt
 80025e2:	4613      	movlt	r3, r2
 80025e4:	f8c9 3000 	str.w	r3, [r9]
 80025e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025ec:	460c      	mov	r4, r1
 80025ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025f2:	b112      	cbz	r2, 80025fa <_printf_common+0x2a>
 80025f4:	3301      	adds	r3, #1
 80025f6:	f8c9 3000 	str.w	r3, [r9]
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	0699      	lsls	r1, r3, #26
 80025fe:	bf42      	ittt	mi
 8002600:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002604:	3302      	addmi	r3, #2
 8002606:	f8c9 3000 	strmi.w	r3, [r9]
 800260a:	6825      	ldr	r5, [r4, #0]
 800260c:	f015 0506 	ands.w	r5, r5, #6
 8002610:	d107      	bne.n	8002622 <_printf_common+0x52>
 8002612:	f104 0a19 	add.w	sl, r4, #25
 8002616:	68e3      	ldr	r3, [r4, #12]
 8002618:	f8d9 2000 	ldr.w	r2, [r9]
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	42ab      	cmp	r3, r5
 8002620:	dc29      	bgt.n	8002676 <_printf_common+0xa6>
 8002622:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002626:	6822      	ldr	r2, [r4, #0]
 8002628:	3300      	adds	r3, #0
 800262a:	bf18      	it	ne
 800262c:	2301      	movne	r3, #1
 800262e:	0692      	lsls	r2, r2, #26
 8002630:	d42e      	bmi.n	8002690 <_printf_common+0xc0>
 8002632:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002636:	4639      	mov	r1, r7
 8002638:	4630      	mov	r0, r6
 800263a:	47c0      	blx	r8
 800263c:	3001      	adds	r0, #1
 800263e:	d021      	beq.n	8002684 <_printf_common+0xb4>
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	68e5      	ldr	r5, [r4, #12]
 8002644:	f003 0306 	and.w	r3, r3, #6
 8002648:	2b04      	cmp	r3, #4
 800264a:	bf18      	it	ne
 800264c:	2500      	movne	r5, #0
 800264e:	f8d9 2000 	ldr.w	r2, [r9]
 8002652:	f04f 0900 	mov.w	r9, #0
 8002656:	bf08      	it	eq
 8002658:	1aad      	subeq	r5, r5, r2
 800265a:	68a3      	ldr	r3, [r4, #8]
 800265c:	6922      	ldr	r2, [r4, #16]
 800265e:	bf08      	it	eq
 8002660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002664:	4293      	cmp	r3, r2
 8002666:	bfc4      	itt	gt
 8002668:	1a9b      	subgt	r3, r3, r2
 800266a:	18ed      	addgt	r5, r5, r3
 800266c:	341a      	adds	r4, #26
 800266e:	454d      	cmp	r5, r9
 8002670:	d11a      	bne.n	80026a8 <_printf_common+0xd8>
 8002672:	2000      	movs	r0, #0
 8002674:	e008      	b.n	8002688 <_printf_common+0xb8>
 8002676:	2301      	movs	r3, #1
 8002678:	4652      	mov	r2, sl
 800267a:	4639      	mov	r1, r7
 800267c:	4630      	mov	r0, r6
 800267e:	47c0      	blx	r8
 8002680:	3001      	adds	r0, #1
 8002682:	d103      	bne.n	800268c <_printf_common+0xbc>
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800268c:	3501      	adds	r5, #1
 800268e:	e7c2      	b.n	8002616 <_printf_common+0x46>
 8002690:	2030      	movs	r0, #48	; 0x30
 8002692:	18e1      	adds	r1, r4, r3
 8002694:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800269e:	4422      	add	r2, r4
 80026a0:	3302      	adds	r3, #2
 80026a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026a6:	e7c4      	b.n	8002632 <_printf_common+0x62>
 80026a8:	2301      	movs	r3, #1
 80026aa:	4622      	mov	r2, r4
 80026ac:	4639      	mov	r1, r7
 80026ae:	4630      	mov	r0, r6
 80026b0:	47c0      	blx	r8
 80026b2:	3001      	adds	r0, #1
 80026b4:	d0e6      	beq.n	8002684 <_printf_common+0xb4>
 80026b6:	f109 0901 	add.w	r9, r9, #1
 80026ba:	e7d8      	b.n	800266e <_printf_common+0x9e>

080026bc <_printf_i>:
 80026bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80026c4:	460c      	mov	r4, r1
 80026c6:	7e09      	ldrb	r1, [r1, #24]
 80026c8:	b085      	sub	sp, #20
 80026ca:	296e      	cmp	r1, #110	; 0x6e
 80026cc:	4617      	mov	r7, r2
 80026ce:	4606      	mov	r6, r0
 80026d0:	4698      	mov	r8, r3
 80026d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80026d4:	f000 80b3 	beq.w	800283e <_printf_i+0x182>
 80026d8:	d822      	bhi.n	8002720 <_printf_i+0x64>
 80026da:	2963      	cmp	r1, #99	; 0x63
 80026dc:	d036      	beq.n	800274c <_printf_i+0x90>
 80026de:	d80a      	bhi.n	80026f6 <_printf_i+0x3a>
 80026e0:	2900      	cmp	r1, #0
 80026e2:	f000 80b9 	beq.w	8002858 <_printf_i+0x19c>
 80026e6:	2958      	cmp	r1, #88	; 0x58
 80026e8:	f000 8083 	beq.w	80027f2 <_printf_i+0x136>
 80026ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80026f4:	e032      	b.n	800275c <_printf_i+0xa0>
 80026f6:	2964      	cmp	r1, #100	; 0x64
 80026f8:	d001      	beq.n	80026fe <_printf_i+0x42>
 80026fa:	2969      	cmp	r1, #105	; 0x69
 80026fc:	d1f6      	bne.n	80026ec <_printf_i+0x30>
 80026fe:	6820      	ldr	r0, [r4, #0]
 8002700:	6813      	ldr	r3, [r2, #0]
 8002702:	0605      	lsls	r5, r0, #24
 8002704:	f103 0104 	add.w	r1, r3, #4
 8002708:	d52a      	bpl.n	8002760 <_printf_i+0xa4>
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6011      	str	r1, [r2, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	da03      	bge.n	800271a <_printf_i+0x5e>
 8002712:	222d      	movs	r2, #45	; 0x2d
 8002714:	425b      	negs	r3, r3
 8002716:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800271a:	486f      	ldr	r0, [pc, #444]	; (80028d8 <_printf_i+0x21c>)
 800271c:	220a      	movs	r2, #10
 800271e:	e039      	b.n	8002794 <_printf_i+0xd8>
 8002720:	2973      	cmp	r1, #115	; 0x73
 8002722:	f000 809d 	beq.w	8002860 <_printf_i+0x1a4>
 8002726:	d808      	bhi.n	800273a <_printf_i+0x7e>
 8002728:	296f      	cmp	r1, #111	; 0x6f
 800272a:	d020      	beq.n	800276e <_printf_i+0xb2>
 800272c:	2970      	cmp	r1, #112	; 0x70
 800272e:	d1dd      	bne.n	80026ec <_printf_i+0x30>
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	f043 0320 	orr.w	r3, r3, #32
 8002736:	6023      	str	r3, [r4, #0]
 8002738:	e003      	b.n	8002742 <_printf_i+0x86>
 800273a:	2975      	cmp	r1, #117	; 0x75
 800273c:	d017      	beq.n	800276e <_printf_i+0xb2>
 800273e:	2978      	cmp	r1, #120	; 0x78
 8002740:	d1d4      	bne.n	80026ec <_printf_i+0x30>
 8002742:	2378      	movs	r3, #120	; 0x78
 8002744:	4865      	ldr	r0, [pc, #404]	; (80028dc <_printf_i+0x220>)
 8002746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800274a:	e055      	b.n	80027f8 <_printf_i+0x13c>
 800274c:	6813      	ldr	r3, [r2, #0]
 800274e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002752:	1d19      	adds	r1, r3, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6011      	str	r1, [r2, #0]
 8002758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800275c:	2301      	movs	r3, #1
 800275e:	e08c      	b.n	800287a <_printf_i+0x1be>
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002766:	6011      	str	r1, [r2, #0]
 8002768:	bf18      	it	ne
 800276a:	b21b      	sxthne	r3, r3
 800276c:	e7cf      	b.n	800270e <_printf_i+0x52>
 800276e:	6813      	ldr	r3, [r2, #0]
 8002770:	6825      	ldr	r5, [r4, #0]
 8002772:	1d18      	adds	r0, r3, #4
 8002774:	6010      	str	r0, [r2, #0]
 8002776:	0628      	lsls	r0, r5, #24
 8002778:	d501      	bpl.n	800277e <_printf_i+0xc2>
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	e002      	b.n	8002784 <_printf_i+0xc8>
 800277e:	0668      	lsls	r0, r5, #25
 8002780:	d5fb      	bpl.n	800277a <_printf_i+0xbe>
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	296f      	cmp	r1, #111	; 0x6f
 8002786:	bf14      	ite	ne
 8002788:	220a      	movne	r2, #10
 800278a:	2208      	moveq	r2, #8
 800278c:	4852      	ldr	r0, [pc, #328]	; (80028d8 <_printf_i+0x21c>)
 800278e:	2100      	movs	r1, #0
 8002790:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002794:	6865      	ldr	r5, [r4, #4]
 8002796:	2d00      	cmp	r5, #0
 8002798:	60a5      	str	r5, [r4, #8]
 800279a:	f2c0 8095 	blt.w	80028c8 <_printf_i+0x20c>
 800279e:	6821      	ldr	r1, [r4, #0]
 80027a0:	f021 0104 	bic.w	r1, r1, #4
 80027a4:	6021      	str	r1, [r4, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d13d      	bne.n	8002826 <_printf_i+0x16a>
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	f040 808e 	bne.w	80028cc <_printf_i+0x210>
 80027b0:	4665      	mov	r5, ip
 80027b2:	2a08      	cmp	r2, #8
 80027b4:	d10b      	bne.n	80027ce <_printf_i+0x112>
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	07db      	lsls	r3, r3, #31
 80027ba:	d508      	bpl.n	80027ce <_printf_i+0x112>
 80027bc:	6923      	ldr	r3, [r4, #16]
 80027be:	6862      	ldr	r2, [r4, #4]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	bfde      	ittt	le
 80027c4:	2330      	movle	r3, #48	; 0x30
 80027c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027ce:	ebac 0305 	sub.w	r3, ip, r5
 80027d2:	6123      	str	r3, [r4, #16]
 80027d4:	f8cd 8000 	str.w	r8, [sp]
 80027d8:	463b      	mov	r3, r7
 80027da:	aa03      	add	r2, sp, #12
 80027dc:	4621      	mov	r1, r4
 80027de:	4630      	mov	r0, r6
 80027e0:	f7ff fef6 	bl	80025d0 <_printf_common>
 80027e4:	3001      	adds	r0, #1
 80027e6:	d14d      	bne.n	8002884 <_printf_i+0x1c8>
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	b005      	add	sp, #20
 80027ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027f2:	4839      	ldr	r0, [pc, #228]	; (80028d8 <_printf_i+0x21c>)
 80027f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	6821      	ldr	r1, [r4, #0]
 80027fc:	1d1d      	adds	r5, r3, #4
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6015      	str	r5, [r2, #0]
 8002802:	060a      	lsls	r2, r1, #24
 8002804:	d50b      	bpl.n	800281e <_printf_i+0x162>
 8002806:	07ca      	lsls	r2, r1, #31
 8002808:	bf44      	itt	mi
 800280a:	f041 0120 	orrmi.w	r1, r1, #32
 800280e:	6021      	strmi	r1, [r4, #0]
 8002810:	b91b      	cbnz	r3, 800281a <_printf_i+0x15e>
 8002812:	6822      	ldr	r2, [r4, #0]
 8002814:	f022 0220 	bic.w	r2, r2, #32
 8002818:	6022      	str	r2, [r4, #0]
 800281a:	2210      	movs	r2, #16
 800281c:	e7b7      	b.n	800278e <_printf_i+0xd2>
 800281e:	064d      	lsls	r5, r1, #25
 8002820:	bf48      	it	mi
 8002822:	b29b      	uxthmi	r3, r3
 8002824:	e7ef      	b.n	8002806 <_printf_i+0x14a>
 8002826:	4665      	mov	r5, ip
 8002828:	fbb3 f1f2 	udiv	r1, r3, r2
 800282c:	fb02 3311 	mls	r3, r2, r1, r3
 8002830:	5cc3      	ldrb	r3, [r0, r3]
 8002832:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002836:	460b      	mov	r3, r1
 8002838:	2900      	cmp	r1, #0
 800283a:	d1f5      	bne.n	8002828 <_printf_i+0x16c>
 800283c:	e7b9      	b.n	80027b2 <_printf_i+0xf6>
 800283e:	6813      	ldr	r3, [r2, #0]
 8002840:	6825      	ldr	r5, [r4, #0]
 8002842:	1d18      	adds	r0, r3, #4
 8002844:	6961      	ldr	r1, [r4, #20]
 8002846:	6010      	str	r0, [r2, #0]
 8002848:	0628      	lsls	r0, r5, #24
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	d501      	bpl.n	8002852 <_printf_i+0x196>
 800284e:	6019      	str	r1, [r3, #0]
 8002850:	e002      	b.n	8002858 <_printf_i+0x19c>
 8002852:	066a      	lsls	r2, r5, #25
 8002854:	d5fb      	bpl.n	800284e <_printf_i+0x192>
 8002856:	8019      	strh	r1, [r3, #0]
 8002858:	2300      	movs	r3, #0
 800285a:	4665      	mov	r5, ip
 800285c:	6123      	str	r3, [r4, #16]
 800285e:	e7b9      	b.n	80027d4 <_printf_i+0x118>
 8002860:	6813      	ldr	r3, [r2, #0]
 8002862:	1d19      	adds	r1, r3, #4
 8002864:	6011      	str	r1, [r2, #0]
 8002866:	681d      	ldr	r5, [r3, #0]
 8002868:	6862      	ldr	r2, [r4, #4]
 800286a:	2100      	movs	r1, #0
 800286c:	4628      	mov	r0, r5
 800286e:	f000 f837 	bl	80028e0 <memchr>
 8002872:	b108      	cbz	r0, 8002878 <_printf_i+0x1bc>
 8002874:	1b40      	subs	r0, r0, r5
 8002876:	6060      	str	r0, [r4, #4]
 8002878:	6863      	ldr	r3, [r4, #4]
 800287a:	6123      	str	r3, [r4, #16]
 800287c:	2300      	movs	r3, #0
 800287e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002882:	e7a7      	b.n	80027d4 <_printf_i+0x118>
 8002884:	6923      	ldr	r3, [r4, #16]
 8002886:	462a      	mov	r2, r5
 8002888:	4639      	mov	r1, r7
 800288a:	4630      	mov	r0, r6
 800288c:	47c0      	blx	r8
 800288e:	3001      	adds	r0, #1
 8002890:	d0aa      	beq.n	80027e8 <_printf_i+0x12c>
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	079b      	lsls	r3, r3, #30
 8002896:	d413      	bmi.n	80028c0 <_printf_i+0x204>
 8002898:	68e0      	ldr	r0, [r4, #12]
 800289a:	9b03      	ldr	r3, [sp, #12]
 800289c:	4298      	cmp	r0, r3
 800289e:	bfb8      	it	lt
 80028a0:	4618      	movlt	r0, r3
 80028a2:	e7a3      	b.n	80027ec <_printf_i+0x130>
 80028a4:	2301      	movs	r3, #1
 80028a6:	464a      	mov	r2, r9
 80028a8:	4639      	mov	r1, r7
 80028aa:	4630      	mov	r0, r6
 80028ac:	47c0      	blx	r8
 80028ae:	3001      	adds	r0, #1
 80028b0:	d09a      	beq.n	80027e8 <_printf_i+0x12c>
 80028b2:	3501      	adds	r5, #1
 80028b4:	68e3      	ldr	r3, [r4, #12]
 80028b6:	9a03      	ldr	r2, [sp, #12]
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	42ab      	cmp	r3, r5
 80028bc:	dcf2      	bgt.n	80028a4 <_printf_i+0x1e8>
 80028be:	e7eb      	b.n	8002898 <_printf_i+0x1dc>
 80028c0:	2500      	movs	r5, #0
 80028c2:	f104 0919 	add.w	r9, r4, #25
 80028c6:	e7f5      	b.n	80028b4 <_printf_i+0x1f8>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ac      	bne.n	8002826 <_printf_i+0x16a>
 80028cc:	7803      	ldrb	r3, [r0, #0]
 80028ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028d6:	e76c      	b.n	80027b2 <_printf_i+0xf6>
 80028d8:	08002ed5 	.word	0x08002ed5
 80028dc:	08002ee6 	.word	0x08002ee6

080028e0 <memchr>:
 80028e0:	b510      	push	{r4, lr}
 80028e2:	b2c9      	uxtb	r1, r1
 80028e4:	4402      	add	r2, r0
 80028e6:	4290      	cmp	r0, r2
 80028e8:	4603      	mov	r3, r0
 80028ea:	d101      	bne.n	80028f0 <memchr+0x10>
 80028ec:	2300      	movs	r3, #0
 80028ee:	e003      	b.n	80028f8 <memchr+0x18>
 80028f0:	781c      	ldrb	r4, [r3, #0]
 80028f2:	3001      	adds	r0, #1
 80028f4:	428c      	cmp	r4, r1
 80028f6:	d1f6      	bne.n	80028e6 <memchr+0x6>
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd10      	pop	{r4, pc}

080028fc <memcpy>:
 80028fc:	b510      	push	{r4, lr}
 80028fe:	1e43      	subs	r3, r0, #1
 8002900:	440a      	add	r2, r1
 8002902:	4291      	cmp	r1, r2
 8002904:	d100      	bne.n	8002908 <memcpy+0xc>
 8002906:	bd10      	pop	{r4, pc}
 8002908:	f811 4b01 	ldrb.w	r4, [r1], #1
 800290c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002910:	e7f7      	b.n	8002902 <memcpy+0x6>

08002912 <memmove>:
 8002912:	4288      	cmp	r0, r1
 8002914:	b510      	push	{r4, lr}
 8002916:	eb01 0302 	add.w	r3, r1, r2
 800291a:	d807      	bhi.n	800292c <memmove+0x1a>
 800291c:	1e42      	subs	r2, r0, #1
 800291e:	4299      	cmp	r1, r3
 8002920:	d00a      	beq.n	8002938 <memmove+0x26>
 8002922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002926:	f802 4f01 	strb.w	r4, [r2, #1]!
 800292a:	e7f8      	b.n	800291e <memmove+0xc>
 800292c:	4283      	cmp	r3, r0
 800292e:	d9f5      	bls.n	800291c <memmove+0xa>
 8002930:	1881      	adds	r1, r0, r2
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	42d3      	cmn	r3, r2
 8002936:	d100      	bne.n	800293a <memmove+0x28>
 8002938:	bd10      	pop	{r4, pc}
 800293a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800293e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002942:	e7f7      	b.n	8002934 <memmove+0x22>

08002944 <_free_r>:
 8002944:	b538      	push	{r3, r4, r5, lr}
 8002946:	4605      	mov	r5, r0
 8002948:	2900      	cmp	r1, #0
 800294a:	d043      	beq.n	80029d4 <_free_r+0x90>
 800294c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002950:	1f0c      	subs	r4, r1, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	bfb8      	it	lt
 8002956:	18e4      	addlt	r4, r4, r3
 8002958:	f000 f8d0 	bl	8002afc <__malloc_lock>
 800295c:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <_free_r+0x94>)
 800295e:	6813      	ldr	r3, [r2, #0]
 8002960:	4610      	mov	r0, r2
 8002962:	b933      	cbnz	r3, 8002972 <_free_r+0x2e>
 8002964:	6063      	str	r3, [r4, #4]
 8002966:	6014      	str	r4, [r2, #0]
 8002968:	4628      	mov	r0, r5
 800296a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800296e:	f000 b8c6 	b.w	8002afe <__malloc_unlock>
 8002972:	42a3      	cmp	r3, r4
 8002974:	d90b      	bls.n	800298e <_free_r+0x4a>
 8002976:	6821      	ldr	r1, [r4, #0]
 8002978:	1862      	adds	r2, r4, r1
 800297a:	4293      	cmp	r3, r2
 800297c:	bf01      	itttt	eq
 800297e:	681a      	ldreq	r2, [r3, #0]
 8002980:	685b      	ldreq	r3, [r3, #4]
 8002982:	1852      	addeq	r2, r2, r1
 8002984:	6022      	streq	r2, [r4, #0]
 8002986:	6063      	str	r3, [r4, #4]
 8002988:	6004      	str	r4, [r0, #0]
 800298a:	e7ed      	b.n	8002968 <_free_r+0x24>
 800298c:	4613      	mov	r3, r2
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	b10a      	cbz	r2, 8002996 <_free_r+0x52>
 8002992:	42a2      	cmp	r2, r4
 8002994:	d9fa      	bls.n	800298c <_free_r+0x48>
 8002996:	6819      	ldr	r1, [r3, #0]
 8002998:	1858      	adds	r0, r3, r1
 800299a:	42a0      	cmp	r0, r4
 800299c:	d10b      	bne.n	80029b6 <_free_r+0x72>
 800299e:	6820      	ldr	r0, [r4, #0]
 80029a0:	4401      	add	r1, r0
 80029a2:	1858      	adds	r0, r3, r1
 80029a4:	4282      	cmp	r2, r0
 80029a6:	6019      	str	r1, [r3, #0]
 80029a8:	d1de      	bne.n	8002968 <_free_r+0x24>
 80029aa:	6810      	ldr	r0, [r2, #0]
 80029ac:	6852      	ldr	r2, [r2, #4]
 80029ae:	4401      	add	r1, r0
 80029b0:	6019      	str	r1, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	e7d8      	b.n	8002968 <_free_r+0x24>
 80029b6:	d902      	bls.n	80029be <_free_r+0x7a>
 80029b8:	230c      	movs	r3, #12
 80029ba:	602b      	str	r3, [r5, #0]
 80029bc:	e7d4      	b.n	8002968 <_free_r+0x24>
 80029be:	6820      	ldr	r0, [r4, #0]
 80029c0:	1821      	adds	r1, r4, r0
 80029c2:	428a      	cmp	r2, r1
 80029c4:	bf01      	itttt	eq
 80029c6:	6811      	ldreq	r1, [r2, #0]
 80029c8:	6852      	ldreq	r2, [r2, #4]
 80029ca:	1809      	addeq	r1, r1, r0
 80029cc:	6021      	streq	r1, [r4, #0]
 80029ce:	6062      	str	r2, [r4, #4]
 80029d0:	605c      	str	r4, [r3, #4]
 80029d2:	e7c9      	b.n	8002968 <_free_r+0x24>
 80029d4:	bd38      	pop	{r3, r4, r5, pc}
 80029d6:	bf00      	nop
 80029d8:	20000090 	.word	0x20000090

080029dc <_malloc_r>:
 80029dc:	b570      	push	{r4, r5, r6, lr}
 80029de:	1ccd      	adds	r5, r1, #3
 80029e0:	f025 0503 	bic.w	r5, r5, #3
 80029e4:	3508      	adds	r5, #8
 80029e6:	2d0c      	cmp	r5, #12
 80029e8:	bf38      	it	cc
 80029ea:	250c      	movcc	r5, #12
 80029ec:	2d00      	cmp	r5, #0
 80029ee:	4606      	mov	r6, r0
 80029f0:	db01      	blt.n	80029f6 <_malloc_r+0x1a>
 80029f2:	42a9      	cmp	r1, r5
 80029f4:	d903      	bls.n	80029fe <_malloc_r+0x22>
 80029f6:	230c      	movs	r3, #12
 80029f8:	6033      	str	r3, [r6, #0]
 80029fa:	2000      	movs	r0, #0
 80029fc:	bd70      	pop	{r4, r5, r6, pc}
 80029fe:	f000 f87d 	bl	8002afc <__malloc_lock>
 8002a02:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <_malloc_r+0xac>)
 8002a04:	6814      	ldr	r4, [r2, #0]
 8002a06:	4621      	mov	r1, r4
 8002a08:	b991      	cbnz	r1, 8002a30 <_malloc_r+0x54>
 8002a0a:	4c20      	ldr	r4, [pc, #128]	; (8002a8c <_malloc_r+0xb0>)
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	b91b      	cbnz	r3, 8002a18 <_malloc_r+0x3c>
 8002a10:	4630      	mov	r0, r6
 8002a12:	f000 f863 	bl	8002adc <_sbrk_r>
 8002a16:	6020      	str	r0, [r4, #0]
 8002a18:	4629      	mov	r1, r5
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	f000 f85e 	bl	8002adc <_sbrk_r>
 8002a20:	1c43      	adds	r3, r0, #1
 8002a22:	d124      	bne.n	8002a6e <_malloc_r+0x92>
 8002a24:	230c      	movs	r3, #12
 8002a26:	4630      	mov	r0, r6
 8002a28:	6033      	str	r3, [r6, #0]
 8002a2a:	f000 f868 	bl	8002afe <__malloc_unlock>
 8002a2e:	e7e4      	b.n	80029fa <_malloc_r+0x1e>
 8002a30:	680b      	ldr	r3, [r1, #0]
 8002a32:	1b5b      	subs	r3, r3, r5
 8002a34:	d418      	bmi.n	8002a68 <_malloc_r+0x8c>
 8002a36:	2b0b      	cmp	r3, #11
 8002a38:	d90f      	bls.n	8002a5a <_malloc_r+0x7e>
 8002a3a:	600b      	str	r3, [r1, #0]
 8002a3c:	18cc      	adds	r4, r1, r3
 8002a3e:	50cd      	str	r5, [r1, r3]
 8002a40:	4630      	mov	r0, r6
 8002a42:	f000 f85c 	bl	8002afe <__malloc_unlock>
 8002a46:	f104 000b 	add.w	r0, r4, #11
 8002a4a:	1d23      	adds	r3, r4, #4
 8002a4c:	f020 0007 	bic.w	r0, r0, #7
 8002a50:	1ac3      	subs	r3, r0, r3
 8002a52:	d0d3      	beq.n	80029fc <_malloc_r+0x20>
 8002a54:	425a      	negs	r2, r3
 8002a56:	50e2      	str	r2, [r4, r3]
 8002a58:	e7d0      	b.n	80029fc <_malloc_r+0x20>
 8002a5a:	684b      	ldr	r3, [r1, #4]
 8002a5c:	428c      	cmp	r4, r1
 8002a5e:	bf16      	itet	ne
 8002a60:	6063      	strne	r3, [r4, #4]
 8002a62:	6013      	streq	r3, [r2, #0]
 8002a64:	460c      	movne	r4, r1
 8002a66:	e7eb      	b.n	8002a40 <_malloc_r+0x64>
 8002a68:	460c      	mov	r4, r1
 8002a6a:	6849      	ldr	r1, [r1, #4]
 8002a6c:	e7cc      	b.n	8002a08 <_malloc_r+0x2c>
 8002a6e:	1cc4      	adds	r4, r0, #3
 8002a70:	f024 0403 	bic.w	r4, r4, #3
 8002a74:	42a0      	cmp	r0, r4
 8002a76:	d005      	beq.n	8002a84 <_malloc_r+0xa8>
 8002a78:	1a21      	subs	r1, r4, r0
 8002a7a:	4630      	mov	r0, r6
 8002a7c:	f000 f82e 	bl	8002adc <_sbrk_r>
 8002a80:	3001      	adds	r0, #1
 8002a82:	d0cf      	beq.n	8002a24 <_malloc_r+0x48>
 8002a84:	6025      	str	r5, [r4, #0]
 8002a86:	e7db      	b.n	8002a40 <_malloc_r+0x64>
 8002a88:	20000090 	.word	0x20000090
 8002a8c:	20000094 	.word	0x20000094

08002a90 <_realloc_r>:
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	4607      	mov	r7, r0
 8002a94:	4614      	mov	r4, r2
 8002a96:	460e      	mov	r6, r1
 8002a98:	b921      	cbnz	r1, 8002aa4 <_realloc_r+0x14>
 8002a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	f7ff bf9c 	b.w	80029dc <_malloc_r>
 8002aa4:	b922      	cbnz	r2, 8002ab0 <_realloc_r+0x20>
 8002aa6:	f7ff ff4d 	bl	8002944 <_free_r>
 8002aaa:	4625      	mov	r5, r4
 8002aac:	4628      	mov	r0, r5
 8002aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab0:	f000 f826 	bl	8002b00 <_malloc_usable_size_r>
 8002ab4:	42a0      	cmp	r0, r4
 8002ab6:	d20f      	bcs.n	8002ad8 <_realloc_r+0x48>
 8002ab8:	4621      	mov	r1, r4
 8002aba:	4638      	mov	r0, r7
 8002abc:	f7ff ff8e 	bl	80029dc <_malloc_r>
 8002ac0:	4605      	mov	r5, r0
 8002ac2:	2800      	cmp	r0, #0
 8002ac4:	d0f2      	beq.n	8002aac <_realloc_r+0x1c>
 8002ac6:	4631      	mov	r1, r6
 8002ac8:	4622      	mov	r2, r4
 8002aca:	f7ff ff17 	bl	80028fc <memcpy>
 8002ace:	4631      	mov	r1, r6
 8002ad0:	4638      	mov	r0, r7
 8002ad2:	f7ff ff37 	bl	8002944 <_free_r>
 8002ad6:	e7e9      	b.n	8002aac <_realloc_r+0x1c>
 8002ad8:	4635      	mov	r5, r6
 8002ada:	e7e7      	b.n	8002aac <_realloc_r+0x1c>

08002adc <_sbrk_r>:
 8002adc:	b538      	push	{r3, r4, r5, lr}
 8002ade:	2300      	movs	r3, #0
 8002ae0:	4c05      	ldr	r4, [pc, #20]	; (8002af8 <_sbrk_r+0x1c>)
 8002ae2:	4605      	mov	r5, r0
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	6023      	str	r3, [r4, #0]
 8002ae8:	f7fe f994 	bl	8000e14 <_sbrk>
 8002aec:	1c43      	adds	r3, r0, #1
 8002aee:	d102      	bne.n	8002af6 <_sbrk_r+0x1a>
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	b103      	cbz	r3, 8002af6 <_sbrk_r+0x1a>
 8002af4:	602b      	str	r3, [r5, #0]
 8002af6:	bd38      	pop	{r3, r4, r5, pc}
 8002af8:	200000dc 	.word	0x200000dc

08002afc <__malloc_lock>:
 8002afc:	4770      	bx	lr

08002afe <__malloc_unlock>:
 8002afe:	4770      	bx	lr

08002b00 <_malloc_usable_size_r>:
 8002b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b04:	1f18      	subs	r0, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bfbc      	itt	lt
 8002b0a:	580b      	ldrlt	r3, [r1, r0]
 8002b0c:	18c0      	addlt	r0, r0, r3
 8002b0e:	4770      	bx	lr

08002b10 <_init>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr

08002b1c <_fini>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr
